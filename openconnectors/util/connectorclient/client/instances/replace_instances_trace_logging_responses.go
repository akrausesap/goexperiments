// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ReplaceInstancesTraceLoggingReader is a Reader for the ReplaceInstancesTraceLogging structure.
type ReplaceInstancesTraceLoggingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceInstancesTraceLoggingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReplaceInstancesTraceLoggingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReplaceInstancesTraceLoggingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewReplaceInstancesTraceLoggingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReplaceInstancesTraceLoggingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReplaceInstancesTraceLoggingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReplaceInstancesTraceLoggingMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewReplaceInstancesTraceLoggingNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewReplaceInstancesTraceLoggingConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewReplaceInstancesTraceLoggingUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReplaceInstancesTraceLoggingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReplaceInstancesTraceLoggingOK creates a ReplaceInstancesTraceLoggingOK with default headers values
func NewReplaceInstancesTraceLoggingOK() *ReplaceInstancesTraceLoggingOK {
	return &ReplaceInstancesTraceLoggingOK{}
}

/*ReplaceInstancesTraceLoggingOK handles this case with default header values.

OK - Everything worked as expected
*/
type ReplaceInstancesTraceLoggingOK struct {
}

func (o *ReplaceInstancesTraceLoggingOK) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingOK ", 200)
}

func (o *ReplaceInstancesTraceLoggingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLoggingBadRequest creates a ReplaceInstancesTraceLoggingBadRequest with default headers values
func NewReplaceInstancesTraceLoggingBadRequest() *ReplaceInstancesTraceLoggingBadRequest {
	return &ReplaceInstancesTraceLoggingBadRequest{}
}

/*ReplaceInstancesTraceLoggingBadRequest handles this case with default header values.

Bad Request - Often due to a missing request parameter
*/
type ReplaceInstancesTraceLoggingBadRequest struct {
}

func (o *ReplaceInstancesTraceLoggingBadRequest) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingBadRequest ", 400)
}

func (o *ReplaceInstancesTraceLoggingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLoggingUnauthorized creates a ReplaceInstancesTraceLoggingUnauthorized with default headers values
func NewReplaceInstancesTraceLoggingUnauthorized() *ReplaceInstancesTraceLoggingUnauthorized {
	return &ReplaceInstancesTraceLoggingUnauthorized{}
}

/*ReplaceInstancesTraceLoggingUnauthorized handles this case with default header values.

Unauthorized - An invalid element token, user secret and/or org secret provided
*/
type ReplaceInstancesTraceLoggingUnauthorized struct {
}

func (o *ReplaceInstancesTraceLoggingUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingUnauthorized ", 401)
}

func (o *ReplaceInstancesTraceLoggingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLoggingForbidden creates a ReplaceInstancesTraceLoggingForbidden with default headers values
func NewReplaceInstancesTraceLoggingForbidden() *ReplaceInstancesTraceLoggingForbidden {
	return &ReplaceInstancesTraceLoggingForbidden{}
}

/*ReplaceInstancesTraceLoggingForbidden handles this case with default header values.

Forbidden - Access to the resource by the provider is forbidden
*/
type ReplaceInstancesTraceLoggingForbidden struct {
}

func (o *ReplaceInstancesTraceLoggingForbidden) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingForbidden ", 403)
}

func (o *ReplaceInstancesTraceLoggingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLoggingNotFound creates a ReplaceInstancesTraceLoggingNotFound with default headers values
func NewReplaceInstancesTraceLoggingNotFound() *ReplaceInstancesTraceLoggingNotFound {
	return &ReplaceInstancesTraceLoggingNotFound{}
}

/*ReplaceInstancesTraceLoggingNotFound handles this case with default header values.

Not found - The requested resource is not found
*/
type ReplaceInstancesTraceLoggingNotFound struct {
}

func (o *ReplaceInstancesTraceLoggingNotFound) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingNotFound ", 404)
}

func (o *ReplaceInstancesTraceLoggingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLoggingMethodNotAllowed creates a ReplaceInstancesTraceLoggingMethodNotAllowed with default headers values
func NewReplaceInstancesTraceLoggingMethodNotAllowed() *ReplaceInstancesTraceLoggingMethodNotAllowed {
	return &ReplaceInstancesTraceLoggingMethodNotAllowed{}
}

/*ReplaceInstancesTraceLoggingMethodNotAllowed handles this case with default header values.

Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected
*/
type ReplaceInstancesTraceLoggingMethodNotAllowed struct {
}

func (o *ReplaceInstancesTraceLoggingMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingMethodNotAllowed ", 405)
}

func (o *ReplaceInstancesTraceLoggingMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLoggingNotAcceptable creates a ReplaceInstancesTraceLoggingNotAcceptable with default headers values
func NewReplaceInstancesTraceLoggingNotAcceptable() *ReplaceInstancesTraceLoggingNotAcceptable {
	return &ReplaceInstancesTraceLoggingNotAcceptable{}
}

/*ReplaceInstancesTraceLoggingNotAcceptable handles this case with default header values.

Not acceptable - The response content type does not match the 'Accept' header value
*/
type ReplaceInstancesTraceLoggingNotAcceptable struct {
}

func (o *ReplaceInstancesTraceLoggingNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingNotAcceptable ", 406)
}

func (o *ReplaceInstancesTraceLoggingNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLoggingConflict creates a ReplaceInstancesTraceLoggingConflict with default headers values
func NewReplaceInstancesTraceLoggingConflict() *ReplaceInstancesTraceLoggingConflict {
	return &ReplaceInstancesTraceLoggingConflict{}
}

/*ReplaceInstancesTraceLoggingConflict handles this case with default header values.

Conflict - If a resource being created already exists
*/
type ReplaceInstancesTraceLoggingConflict struct {
}

func (o *ReplaceInstancesTraceLoggingConflict) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingConflict ", 409)
}

func (o *ReplaceInstancesTraceLoggingConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLoggingUnsupportedMediaType creates a ReplaceInstancesTraceLoggingUnsupportedMediaType with default headers values
func NewReplaceInstancesTraceLoggingUnsupportedMediaType() *ReplaceInstancesTraceLoggingUnsupportedMediaType {
	return &ReplaceInstancesTraceLoggingUnsupportedMediaType{}
}

/*ReplaceInstancesTraceLoggingUnsupportedMediaType handles this case with default header values.

Unsupported media type - The server cannot handle the requested Content-Type
*/
type ReplaceInstancesTraceLoggingUnsupportedMediaType struct {
}

func (o *ReplaceInstancesTraceLoggingUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingUnsupportedMediaType ", 415)
}

func (o *ReplaceInstancesTraceLoggingUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLoggingInternalServerError creates a ReplaceInstancesTraceLoggingInternalServerError with default headers values
func NewReplaceInstancesTraceLoggingInternalServerError() *ReplaceInstancesTraceLoggingInternalServerError {
	return &ReplaceInstancesTraceLoggingInternalServerError{}
}

/*ReplaceInstancesTraceLoggingInternalServerError handles this case with default header values.

Server error - Something went wrong on the Cloud Elements server
*/
type ReplaceInstancesTraceLoggingInternalServerError struct {
}

func (o *ReplaceInstancesTraceLoggingInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /instances/trace-logging][%d] replaceInstancesTraceLoggingInternalServerError ", 500)
}

func (o *ReplaceInstancesTraceLoggingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
