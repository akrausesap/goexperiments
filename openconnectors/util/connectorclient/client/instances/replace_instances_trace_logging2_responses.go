// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ReplaceInstancesTraceLogging2Reader is a Reader for the ReplaceInstancesTraceLogging2 structure.
type ReplaceInstancesTraceLogging2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceInstancesTraceLogging2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReplaceInstancesTraceLogging2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReplaceInstancesTraceLogging2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewReplaceInstancesTraceLogging2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReplaceInstancesTraceLogging2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReplaceInstancesTraceLogging2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReplaceInstancesTraceLogging2MethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewReplaceInstancesTraceLogging2NotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewReplaceInstancesTraceLogging2Conflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewReplaceInstancesTraceLogging2UnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReplaceInstancesTraceLogging2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReplaceInstancesTraceLogging2OK creates a ReplaceInstancesTraceLogging2OK with default headers values
func NewReplaceInstancesTraceLogging2OK() *ReplaceInstancesTraceLogging2OK {
	return &ReplaceInstancesTraceLogging2OK{}
}

/*ReplaceInstancesTraceLogging2OK handles this case with default header values.

OK - Everything worked as expected
*/
type ReplaceInstancesTraceLogging2OK struct {
}

func (o *ReplaceInstancesTraceLogging2OK) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2OK ", 200)
}

func (o *ReplaceInstancesTraceLogging2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLogging2BadRequest creates a ReplaceInstancesTraceLogging2BadRequest with default headers values
func NewReplaceInstancesTraceLogging2BadRequest() *ReplaceInstancesTraceLogging2BadRequest {
	return &ReplaceInstancesTraceLogging2BadRequest{}
}

/*ReplaceInstancesTraceLogging2BadRequest handles this case with default header values.

Bad Request - Often due to a missing request parameter
*/
type ReplaceInstancesTraceLogging2BadRequest struct {
}

func (o *ReplaceInstancesTraceLogging2BadRequest) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2BadRequest ", 400)
}

func (o *ReplaceInstancesTraceLogging2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLogging2Unauthorized creates a ReplaceInstancesTraceLogging2Unauthorized with default headers values
func NewReplaceInstancesTraceLogging2Unauthorized() *ReplaceInstancesTraceLogging2Unauthorized {
	return &ReplaceInstancesTraceLogging2Unauthorized{}
}

/*ReplaceInstancesTraceLogging2Unauthorized handles this case with default header values.

Unauthorized - An invalid element token, user secret and/or org secret provided
*/
type ReplaceInstancesTraceLogging2Unauthorized struct {
}

func (o *ReplaceInstancesTraceLogging2Unauthorized) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2Unauthorized ", 401)
}

func (o *ReplaceInstancesTraceLogging2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLogging2Forbidden creates a ReplaceInstancesTraceLogging2Forbidden with default headers values
func NewReplaceInstancesTraceLogging2Forbidden() *ReplaceInstancesTraceLogging2Forbidden {
	return &ReplaceInstancesTraceLogging2Forbidden{}
}

/*ReplaceInstancesTraceLogging2Forbidden handles this case with default header values.

Forbidden - Access to the resource by the provider is forbidden
*/
type ReplaceInstancesTraceLogging2Forbidden struct {
}

func (o *ReplaceInstancesTraceLogging2Forbidden) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2Forbidden ", 403)
}

func (o *ReplaceInstancesTraceLogging2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLogging2NotFound creates a ReplaceInstancesTraceLogging2NotFound with default headers values
func NewReplaceInstancesTraceLogging2NotFound() *ReplaceInstancesTraceLogging2NotFound {
	return &ReplaceInstancesTraceLogging2NotFound{}
}

/*ReplaceInstancesTraceLogging2NotFound handles this case with default header values.

Not found - The requested resource is not found
*/
type ReplaceInstancesTraceLogging2NotFound struct {
}

func (o *ReplaceInstancesTraceLogging2NotFound) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2NotFound ", 404)
}

func (o *ReplaceInstancesTraceLogging2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLogging2MethodNotAllowed creates a ReplaceInstancesTraceLogging2MethodNotAllowed with default headers values
func NewReplaceInstancesTraceLogging2MethodNotAllowed() *ReplaceInstancesTraceLogging2MethodNotAllowed {
	return &ReplaceInstancesTraceLogging2MethodNotAllowed{}
}

/*ReplaceInstancesTraceLogging2MethodNotAllowed handles this case with default header values.

Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected
*/
type ReplaceInstancesTraceLogging2MethodNotAllowed struct {
}

func (o *ReplaceInstancesTraceLogging2MethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2MethodNotAllowed ", 405)
}

func (o *ReplaceInstancesTraceLogging2MethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLogging2NotAcceptable creates a ReplaceInstancesTraceLogging2NotAcceptable with default headers values
func NewReplaceInstancesTraceLogging2NotAcceptable() *ReplaceInstancesTraceLogging2NotAcceptable {
	return &ReplaceInstancesTraceLogging2NotAcceptable{}
}

/*ReplaceInstancesTraceLogging2NotAcceptable handles this case with default header values.

Not acceptable - The response content type does not match the 'Accept' header value
*/
type ReplaceInstancesTraceLogging2NotAcceptable struct {
}

func (o *ReplaceInstancesTraceLogging2NotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2NotAcceptable ", 406)
}

func (o *ReplaceInstancesTraceLogging2NotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLogging2Conflict creates a ReplaceInstancesTraceLogging2Conflict with default headers values
func NewReplaceInstancesTraceLogging2Conflict() *ReplaceInstancesTraceLogging2Conflict {
	return &ReplaceInstancesTraceLogging2Conflict{}
}

/*ReplaceInstancesTraceLogging2Conflict handles this case with default header values.

Conflict - If a resource being created already exists
*/
type ReplaceInstancesTraceLogging2Conflict struct {
}

func (o *ReplaceInstancesTraceLogging2Conflict) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2Conflict ", 409)
}

func (o *ReplaceInstancesTraceLogging2Conflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLogging2UnsupportedMediaType creates a ReplaceInstancesTraceLogging2UnsupportedMediaType with default headers values
func NewReplaceInstancesTraceLogging2UnsupportedMediaType() *ReplaceInstancesTraceLogging2UnsupportedMediaType {
	return &ReplaceInstancesTraceLogging2UnsupportedMediaType{}
}

/*ReplaceInstancesTraceLogging2UnsupportedMediaType handles this case with default header values.

Unsupported media type - The server cannot handle the requested Content-Type
*/
type ReplaceInstancesTraceLogging2UnsupportedMediaType struct {
}

func (o *ReplaceInstancesTraceLogging2UnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2UnsupportedMediaType ", 415)
}

func (o *ReplaceInstancesTraceLogging2UnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesTraceLogging2InternalServerError creates a ReplaceInstancesTraceLogging2InternalServerError with default headers values
func NewReplaceInstancesTraceLogging2InternalServerError() *ReplaceInstancesTraceLogging2InternalServerError {
	return &ReplaceInstancesTraceLogging2InternalServerError{}
}

/*ReplaceInstancesTraceLogging2InternalServerError handles this case with default header values.

Server error - Something went wrong on the Cloud Elements server
*/
type ReplaceInstancesTraceLogging2InternalServerError struct {
}

func (o *ReplaceInstancesTraceLogging2InternalServerError) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}/trace-logging][%d] replaceInstancesTraceLogging2InternalServerError ", 500)
}

func (o *ReplaceInstancesTraceLogging2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
