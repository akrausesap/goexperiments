// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ReplaceInstancesEnabledReader is a Reader for the ReplaceInstancesEnabled structure.
type ReplaceInstancesEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceInstancesEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReplaceInstancesEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReplaceInstancesEnabledBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewReplaceInstancesEnabledUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReplaceInstancesEnabledForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReplaceInstancesEnabledNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReplaceInstancesEnabledMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewReplaceInstancesEnabledNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewReplaceInstancesEnabledConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewReplaceInstancesEnabledUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReplaceInstancesEnabledInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReplaceInstancesEnabledOK creates a ReplaceInstancesEnabledOK with default headers values
func NewReplaceInstancesEnabledOK() *ReplaceInstancesEnabledOK {
	return &ReplaceInstancesEnabledOK{}
}

/*ReplaceInstancesEnabledOK handles this case with default header values.

OK - Everything worked as expected
*/
type ReplaceInstancesEnabledOK struct {
}

func (o *ReplaceInstancesEnabledOK) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledOK ", 200)
}

func (o *ReplaceInstancesEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesEnabledBadRequest creates a ReplaceInstancesEnabledBadRequest with default headers values
func NewReplaceInstancesEnabledBadRequest() *ReplaceInstancesEnabledBadRequest {
	return &ReplaceInstancesEnabledBadRequest{}
}

/*ReplaceInstancesEnabledBadRequest handles this case with default header values.

Bad Request - Often due to a missing request parameter
*/
type ReplaceInstancesEnabledBadRequest struct {
}

func (o *ReplaceInstancesEnabledBadRequest) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledBadRequest ", 400)
}

func (o *ReplaceInstancesEnabledBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesEnabledUnauthorized creates a ReplaceInstancesEnabledUnauthorized with default headers values
func NewReplaceInstancesEnabledUnauthorized() *ReplaceInstancesEnabledUnauthorized {
	return &ReplaceInstancesEnabledUnauthorized{}
}

/*ReplaceInstancesEnabledUnauthorized handles this case with default header values.

Unauthorized - An invalid element token, user secret and/or org secret provided
*/
type ReplaceInstancesEnabledUnauthorized struct {
}

func (o *ReplaceInstancesEnabledUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledUnauthorized ", 401)
}

func (o *ReplaceInstancesEnabledUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesEnabledForbidden creates a ReplaceInstancesEnabledForbidden with default headers values
func NewReplaceInstancesEnabledForbidden() *ReplaceInstancesEnabledForbidden {
	return &ReplaceInstancesEnabledForbidden{}
}

/*ReplaceInstancesEnabledForbidden handles this case with default header values.

Forbidden - Access to the resource by the provider is forbidden
*/
type ReplaceInstancesEnabledForbidden struct {
}

func (o *ReplaceInstancesEnabledForbidden) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledForbidden ", 403)
}

func (o *ReplaceInstancesEnabledForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesEnabledNotFound creates a ReplaceInstancesEnabledNotFound with default headers values
func NewReplaceInstancesEnabledNotFound() *ReplaceInstancesEnabledNotFound {
	return &ReplaceInstancesEnabledNotFound{}
}

/*ReplaceInstancesEnabledNotFound handles this case with default header values.

Not found - The requested resource is not found
*/
type ReplaceInstancesEnabledNotFound struct {
}

func (o *ReplaceInstancesEnabledNotFound) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledNotFound ", 404)
}

func (o *ReplaceInstancesEnabledNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesEnabledMethodNotAllowed creates a ReplaceInstancesEnabledMethodNotAllowed with default headers values
func NewReplaceInstancesEnabledMethodNotAllowed() *ReplaceInstancesEnabledMethodNotAllowed {
	return &ReplaceInstancesEnabledMethodNotAllowed{}
}

/*ReplaceInstancesEnabledMethodNotAllowed handles this case with default header values.

Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected
*/
type ReplaceInstancesEnabledMethodNotAllowed struct {
}

func (o *ReplaceInstancesEnabledMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledMethodNotAllowed ", 405)
}

func (o *ReplaceInstancesEnabledMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesEnabledNotAcceptable creates a ReplaceInstancesEnabledNotAcceptable with default headers values
func NewReplaceInstancesEnabledNotAcceptable() *ReplaceInstancesEnabledNotAcceptable {
	return &ReplaceInstancesEnabledNotAcceptable{}
}

/*ReplaceInstancesEnabledNotAcceptable handles this case with default header values.

Not acceptable - The response content type does not match the 'Accept' header value
*/
type ReplaceInstancesEnabledNotAcceptable struct {
}

func (o *ReplaceInstancesEnabledNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledNotAcceptable ", 406)
}

func (o *ReplaceInstancesEnabledNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesEnabledConflict creates a ReplaceInstancesEnabledConflict with default headers values
func NewReplaceInstancesEnabledConflict() *ReplaceInstancesEnabledConflict {
	return &ReplaceInstancesEnabledConflict{}
}

/*ReplaceInstancesEnabledConflict handles this case with default header values.

Conflict - If a resource being created already exists
*/
type ReplaceInstancesEnabledConflict struct {
}

func (o *ReplaceInstancesEnabledConflict) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledConflict ", 409)
}

func (o *ReplaceInstancesEnabledConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesEnabledUnsupportedMediaType creates a ReplaceInstancesEnabledUnsupportedMediaType with default headers values
func NewReplaceInstancesEnabledUnsupportedMediaType() *ReplaceInstancesEnabledUnsupportedMediaType {
	return &ReplaceInstancesEnabledUnsupportedMediaType{}
}

/*ReplaceInstancesEnabledUnsupportedMediaType handles this case with default header values.

Unsupported media type - The server cannot handle the requested Content-Type
*/
type ReplaceInstancesEnabledUnsupportedMediaType struct {
}

func (o *ReplaceInstancesEnabledUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledUnsupportedMediaType ", 415)
}

func (o *ReplaceInstancesEnabledUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesEnabledInternalServerError creates a ReplaceInstancesEnabledInternalServerError with default headers values
func NewReplaceInstancesEnabledInternalServerError() *ReplaceInstancesEnabledInternalServerError {
	return &ReplaceInstancesEnabledInternalServerError{}
}

/*ReplaceInstancesEnabledInternalServerError handles this case with default header values.

Server error - Something went wrong on the Cloud Elements server
*/
type ReplaceInstancesEnabledInternalServerError struct {
}

func (o *ReplaceInstancesEnabledInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /instances/enabled][%d] replaceInstancesEnabledInternalServerError ", 500)
}

func (o *ReplaceInstancesEnabledInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
