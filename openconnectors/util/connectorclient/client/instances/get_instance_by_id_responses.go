// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/akrausesap/goexperiments/openconnectors/util/connectorclient/models"
)

// GetInstanceByIDReader is a Reader for the GetInstanceByID structure.
type GetInstanceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstanceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetInstanceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetInstanceByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetInstanceByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetInstanceByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetInstanceByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetInstanceByIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewGetInstanceByIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetInstanceByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGetInstanceByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetInstanceByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInstanceByIDOK creates a GetInstanceByIDOK with default headers values
func NewGetInstanceByIDOK() *GetInstanceByIDOK {
	return &GetInstanceByIDOK{}
}

/*GetInstanceByIDOK handles this case with default header values.

OK - Everything worked as expected
*/
type GetInstanceByIDOK struct {
	Payload *models.ElementInstance
}

func (o *GetInstanceByIDOK) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdOK  %+v", 200, o.Payload)
}

func (o *GetInstanceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ElementInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstanceByIDBadRequest creates a GetInstanceByIDBadRequest with default headers values
func NewGetInstanceByIDBadRequest() *GetInstanceByIDBadRequest {
	return &GetInstanceByIDBadRequest{}
}

/*GetInstanceByIDBadRequest handles this case with default header values.

Bad Request - Often due to a missing request parameter
*/
type GetInstanceByIDBadRequest struct {
}

func (o *GetInstanceByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdBadRequest ", 400)
}

func (o *GetInstanceByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstanceByIDUnauthorized creates a GetInstanceByIDUnauthorized with default headers values
func NewGetInstanceByIDUnauthorized() *GetInstanceByIDUnauthorized {
	return &GetInstanceByIDUnauthorized{}
}

/*GetInstanceByIDUnauthorized handles this case with default header values.

Unauthorized - An invalid element token, user secret and/or org secret provided
*/
type GetInstanceByIDUnauthorized struct {
}

func (o *GetInstanceByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdUnauthorized ", 401)
}

func (o *GetInstanceByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstanceByIDForbidden creates a GetInstanceByIDForbidden with default headers values
func NewGetInstanceByIDForbidden() *GetInstanceByIDForbidden {
	return &GetInstanceByIDForbidden{}
}

/*GetInstanceByIDForbidden handles this case with default header values.

Forbidden - Access to the resource by the provider is forbidden
*/
type GetInstanceByIDForbidden struct {
}

func (o *GetInstanceByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdForbidden ", 403)
}

func (o *GetInstanceByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstanceByIDNotFound creates a GetInstanceByIDNotFound with default headers values
func NewGetInstanceByIDNotFound() *GetInstanceByIDNotFound {
	return &GetInstanceByIDNotFound{}
}

/*GetInstanceByIDNotFound handles this case with default header values.

Not found - The requested resource is not found
*/
type GetInstanceByIDNotFound struct {
}

func (o *GetInstanceByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdNotFound ", 404)
}

func (o *GetInstanceByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstanceByIDMethodNotAllowed creates a GetInstanceByIDMethodNotAllowed with default headers values
func NewGetInstanceByIDMethodNotAllowed() *GetInstanceByIDMethodNotAllowed {
	return &GetInstanceByIDMethodNotAllowed{}
}

/*GetInstanceByIDMethodNotAllowed handles this case with default header values.

Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected
*/
type GetInstanceByIDMethodNotAllowed struct {
}

func (o *GetInstanceByIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdMethodNotAllowed ", 405)
}

func (o *GetInstanceByIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstanceByIDNotAcceptable creates a GetInstanceByIDNotAcceptable with default headers values
func NewGetInstanceByIDNotAcceptable() *GetInstanceByIDNotAcceptable {
	return &GetInstanceByIDNotAcceptable{}
}

/*GetInstanceByIDNotAcceptable handles this case with default header values.

Not acceptable - The response content type does not match the 'Accept' header value
*/
type GetInstanceByIDNotAcceptable struct {
}

func (o *GetInstanceByIDNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdNotAcceptable ", 406)
}

func (o *GetInstanceByIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstanceByIDConflict creates a GetInstanceByIDConflict with default headers values
func NewGetInstanceByIDConflict() *GetInstanceByIDConflict {
	return &GetInstanceByIDConflict{}
}

/*GetInstanceByIDConflict handles this case with default header values.

Conflict - If a resource being created already exists
*/
type GetInstanceByIDConflict struct {
}

func (o *GetInstanceByIDConflict) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdConflict ", 409)
}

func (o *GetInstanceByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstanceByIDUnsupportedMediaType creates a GetInstanceByIDUnsupportedMediaType with default headers values
func NewGetInstanceByIDUnsupportedMediaType() *GetInstanceByIDUnsupportedMediaType {
	return &GetInstanceByIDUnsupportedMediaType{}
}

/*GetInstanceByIDUnsupportedMediaType handles this case with default header values.

Unsupported media type - The server cannot handle the requested Content-Type
*/
type GetInstanceByIDUnsupportedMediaType struct {
}

func (o *GetInstanceByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdUnsupportedMediaType ", 415)
}

func (o *GetInstanceByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstanceByIDInternalServerError creates a GetInstanceByIDInternalServerError with default headers values
func NewGetInstanceByIDInternalServerError() *GetInstanceByIDInternalServerError {
	return &GetInstanceByIDInternalServerError{}
}

/*GetInstanceByIDInternalServerError handles this case with default header values.

Server error - Something went wrong on the Cloud Elements server
*/
type GetInstanceByIDInternalServerError struct {
}

func (o *GetInstanceByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /instances/{id}][%d] getInstanceByIdInternalServerError ", 500)
}

func (o *GetInstanceByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
