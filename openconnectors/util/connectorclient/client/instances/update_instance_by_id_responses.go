// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/akrausesap/goexperiments/openconnectors/util/connectorclient/models"
)

// UpdateInstanceByIDReader is a Reader for the UpdateInstanceByID structure.
type UpdateInstanceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInstanceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateInstanceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateInstanceByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateInstanceByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateInstanceByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateInstanceByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewUpdateInstanceByIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewUpdateInstanceByIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateInstanceByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewUpdateInstanceByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateInstanceByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateInstanceByIDOK creates a UpdateInstanceByIDOK with default headers values
func NewUpdateInstanceByIDOK() *UpdateInstanceByIDOK {
	return &UpdateInstanceByIDOK{}
}

/*UpdateInstanceByIDOK handles this case with default header values.

OK - Everything worked as expected
*/
type UpdateInstanceByIDOK struct {
	Payload *models.ElementInstance
}

func (o *UpdateInstanceByIDOK) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdOK  %+v", 200, o.Payload)
}

func (o *UpdateInstanceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ElementInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInstanceByIDBadRequest creates a UpdateInstanceByIDBadRequest with default headers values
func NewUpdateInstanceByIDBadRequest() *UpdateInstanceByIDBadRequest {
	return &UpdateInstanceByIDBadRequest{}
}

/*UpdateInstanceByIDBadRequest handles this case with default header values.

Bad Request - Often due to a missing request parameter
*/
type UpdateInstanceByIDBadRequest struct {
}

func (o *UpdateInstanceByIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdBadRequest ", 400)
}

func (o *UpdateInstanceByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceByIDUnauthorized creates a UpdateInstanceByIDUnauthorized with default headers values
func NewUpdateInstanceByIDUnauthorized() *UpdateInstanceByIDUnauthorized {
	return &UpdateInstanceByIDUnauthorized{}
}

/*UpdateInstanceByIDUnauthorized handles this case with default header values.

Unauthorized - An invalid element token, user secret and/or org secret provided
*/
type UpdateInstanceByIDUnauthorized struct {
}

func (o *UpdateInstanceByIDUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdUnauthorized ", 401)
}

func (o *UpdateInstanceByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceByIDForbidden creates a UpdateInstanceByIDForbidden with default headers values
func NewUpdateInstanceByIDForbidden() *UpdateInstanceByIDForbidden {
	return &UpdateInstanceByIDForbidden{}
}

/*UpdateInstanceByIDForbidden handles this case with default header values.

Forbidden - Access to the resource by the provider is forbidden
*/
type UpdateInstanceByIDForbidden struct {
}

func (o *UpdateInstanceByIDForbidden) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdForbidden ", 403)
}

func (o *UpdateInstanceByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceByIDNotFound creates a UpdateInstanceByIDNotFound with default headers values
func NewUpdateInstanceByIDNotFound() *UpdateInstanceByIDNotFound {
	return &UpdateInstanceByIDNotFound{}
}

/*UpdateInstanceByIDNotFound handles this case with default header values.

Not found - The requested resource is not found
*/
type UpdateInstanceByIDNotFound struct {
}

func (o *UpdateInstanceByIDNotFound) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdNotFound ", 404)
}

func (o *UpdateInstanceByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceByIDMethodNotAllowed creates a UpdateInstanceByIDMethodNotAllowed with default headers values
func NewUpdateInstanceByIDMethodNotAllowed() *UpdateInstanceByIDMethodNotAllowed {
	return &UpdateInstanceByIDMethodNotAllowed{}
}

/*UpdateInstanceByIDMethodNotAllowed handles this case with default header values.

Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected
*/
type UpdateInstanceByIDMethodNotAllowed struct {
}

func (o *UpdateInstanceByIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdMethodNotAllowed ", 405)
}

func (o *UpdateInstanceByIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceByIDNotAcceptable creates a UpdateInstanceByIDNotAcceptable with default headers values
func NewUpdateInstanceByIDNotAcceptable() *UpdateInstanceByIDNotAcceptable {
	return &UpdateInstanceByIDNotAcceptable{}
}

/*UpdateInstanceByIDNotAcceptable handles this case with default header values.

Not acceptable - The response content type does not match the 'Accept' header value
*/
type UpdateInstanceByIDNotAcceptable struct {
}

func (o *UpdateInstanceByIDNotAcceptable) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdNotAcceptable ", 406)
}

func (o *UpdateInstanceByIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceByIDConflict creates a UpdateInstanceByIDConflict with default headers values
func NewUpdateInstanceByIDConflict() *UpdateInstanceByIDConflict {
	return &UpdateInstanceByIDConflict{}
}

/*UpdateInstanceByIDConflict handles this case with default header values.

Conflict - If a resource being created already exists
*/
type UpdateInstanceByIDConflict struct {
}

func (o *UpdateInstanceByIDConflict) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdConflict ", 409)
}

func (o *UpdateInstanceByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceByIDUnsupportedMediaType creates a UpdateInstanceByIDUnsupportedMediaType with default headers values
func NewUpdateInstanceByIDUnsupportedMediaType() *UpdateInstanceByIDUnsupportedMediaType {
	return &UpdateInstanceByIDUnsupportedMediaType{}
}

/*UpdateInstanceByIDUnsupportedMediaType handles this case with default header values.

Unsupported media type - The server cannot handle the requested Content-Type
*/
type UpdateInstanceByIDUnsupportedMediaType struct {
}

func (o *UpdateInstanceByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdUnsupportedMediaType ", 415)
}

func (o *UpdateInstanceByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateInstanceByIDInternalServerError creates a UpdateInstanceByIDInternalServerError with default headers values
func NewUpdateInstanceByIDInternalServerError() *UpdateInstanceByIDInternalServerError {
	return &UpdateInstanceByIDInternalServerError{}
}

/*UpdateInstanceByIDInternalServerError handles this case with default header values.

Server error - Something went wrong on the Cloud Elements server
*/
type UpdateInstanceByIDInternalServerError struct {
}

func (o *UpdateInstanceByIDInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /instances/{id}][%d] updateInstanceByIdInternalServerError ", 500)
}

func (o *UpdateInstanceByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
