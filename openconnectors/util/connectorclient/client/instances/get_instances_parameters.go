// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInstancesParams creates a new GetInstancesParams object
// with the default values initialized.
func NewGetInstancesParams() *GetInstancesParams {
	var (
		hydrateDefault = bool(false)
	)
	return &GetInstancesParams{
		Hydrate: &hydrateDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstancesParamsWithTimeout creates a new GetInstancesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInstancesParamsWithTimeout(timeout time.Duration) *GetInstancesParams {
	var (
		hydrateDefault = bool(false)
	)
	return &GetInstancesParams{
		Hydrate: &hydrateDefault,

		timeout: timeout,
	}
}

// NewGetInstancesParamsWithContext creates a new GetInstancesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInstancesParamsWithContext(ctx context.Context) *GetInstancesParams {
	var (
		hydrateDefault = bool(false)
	)
	return &GetInstancesParams{
		Hydrate: &hydrateDefault,

		Context: ctx,
	}
}

// NewGetInstancesParamsWithHTTPClient creates a new GetInstancesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInstancesParamsWithHTTPClient(client *http.Client) *GetInstancesParams {
	var (
		hydrateDefault = bool(false)
	)
	return &GetInstancesParams{
		Hydrate:    &hydrateDefault,
		HTTPClient: client,
	}
}

/*GetInstancesParams contains all the parameters to send to the API endpoint
for the get instances operation typically these are written to a http.Request
*/
type GetInstancesParams struct {

	/*Authorization
	  The authorization tokens. The format for the header value is 'User &lt;user secret&gt;, Organization &lt;org secret&gt;'

	*/
	Authorization string
	/*Hydrate
	  Retrieve element instance configuration and tag information

	*/
	Hydrate *bool
	/*NextPage
	  The next page cursor, taken from the response header: `elements-next-page-token`

	*/
	NextPage *string
	/*PageSize
	  The page size. Defaults to 200 if not provided. Maximum of 200

	*/
	PageSize *int64
	/*SearchText
	  Search by instance name or element key

	*/
	SearchText *string
	/*Tags
	  The tags to search, e.g., development, qa, my sample tag

	*/
	Tags []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get instances params
func (o *GetInstancesParams) WithTimeout(timeout time.Duration) *GetInstancesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get instances params
func (o *GetInstancesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get instances params
func (o *GetInstancesParams) WithContext(ctx context.Context) *GetInstancesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get instances params
func (o *GetInstancesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get instances params
func (o *GetInstancesParams) WithHTTPClient(client *http.Client) *GetInstancesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get instances params
func (o *GetInstancesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get instances params
func (o *GetInstancesParams) WithAuthorization(authorization string) *GetInstancesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get instances params
func (o *GetInstancesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithHydrate adds the hydrate to the get instances params
func (o *GetInstancesParams) WithHydrate(hydrate *bool) *GetInstancesParams {
	o.SetHydrate(hydrate)
	return o
}

// SetHydrate adds the hydrate to the get instances params
func (o *GetInstancesParams) SetHydrate(hydrate *bool) {
	o.Hydrate = hydrate
}

// WithNextPage adds the nextPage to the get instances params
func (o *GetInstancesParams) WithNextPage(nextPage *string) *GetInstancesParams {
	o.SetNextPage(nextPage)
	return o
}

// SetNextPage adds the nextPage to the get instances params
func (o *GetInstancesParams) SetNextPage(nextPage *string) {
	o.NextPage = nextPage
}

// WithPageSize adds the pageSize to the get instances params
func (o *GetInstancesParams) WithPageSize(pageSize *int64) *GetInstancesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get instances params
func (o *GetInstancesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithSearchText adds the searchText to the get instances params
func (o *GetInstancesParams) WithSearchText(searchText *string) *GetInstancesParams {
	o.SetSearchText(searchText)
	return o
}

// SetSearchText adds the searchText to the get instances params
func (o *GetInstancesParams) SetSearchText(searchText *string) {
	o.SearchText = searchText
}

// WithTags adds the tags to the get instances params
func (o *GetInstancesParams) WithTags(tags []string) *GetInstancesParams {
	o.SetTags(tags)
	return o
}

// SetTags adds the tags to the get instances params
func (o *GetInstancesParams) SetTags(tags []string) {
	o.Tags = tags
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstancesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Hydrate != nil {

		// query param hydrate
		var qrHydrate bool
		if o.Hydrate != nil {
			qrHydrate = *o.Hydrate
		}
		qHydrate := swag.FormatBool(qrHydrate)
		if qHydrate != "" {
			if err := r.SetQueryParam("hydrate", qHydrate); err != nil {
				return err
			}
		}

	}

	if o.NextPage != nil {

		// query param nextPage
		var qrNextPage string
		if o.NextPage != nil {
			qrNextPage = *o.NextPage
		}
		qNextPage := qrNextPage
		if qNextPage != "" {
			if err := r.SetQueryParam("nextPage", qNextPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SearchText != nil {

		// query param searchText
		var qrSearchText string
		if o.SearchText != nil {
			qrSearchText = *o.SearchText
		}
		qSearchText := qrSearchText
		if qSearchText != "" {
			if err := r.SetQueryParam("searchText", qSearchText); err != nil {
				return err
			}
		}

	}

	valuesTags := o.Tags

	joinedTags := swag.JoinByFormat(valuesTags, "multi")
	// query array param tags[]
	if err := r.SetQueryParam("tags[]", joinedTags...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
