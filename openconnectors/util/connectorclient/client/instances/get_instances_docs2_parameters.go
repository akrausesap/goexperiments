// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInstancesDocs2Params creates a new GetInstancesDocs2Params object
// with the default values initialized.
func NewGetInstancesDocs2Params() *GetInstancesDocs2Params {
	var (
		versionDefault = string("-1")
	)
	return &GetInstancesDocs2Params{
		Version: &versionDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstancesDocs2ParamsWithTimeout creates a new GetInstancesDocs2Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInstancesDocs2ParamsWithTimeout(timeout time.Duration) *GetInstancesDocs2Params {
	var (
		versionDefault = string("-1")
	)
	return &GetInstancesDocs2Params{
		Version: &versionDefault,

		timeout: timeout,
	}
}

// NewGetInstancesDocs2ParamsWithContext creates a new GetInstancesDocs2Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetInstancesDocs2ParamsWithContext(ctx context.Context) *GetInstancesDocs2Params {
	var (
		versionDefault = string("-1")
	)
	return &GetInstancesDocs2Params{
		Version: &versionDefault,

		Context: ctx,
	}
}

// NewGetInstancesDocs2ParamsWithHTTPClient creates a new GetInstancesDocs2Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInstancesDocs2ParamsWithHTTPClient(client *http.Client) *GetInstancesDocs2Params {
	var (
		versionDefault = string("-1")
	)
	return &GetInstancesDocs2Params{
		Version:    &versionDefault,
		HTTPClient: client,
	}
}

/*GetInstancesDocs2Params contains all the parameters to send to the API endpoint
for the get instances docs2 operation typically these are written to a http.Request
*/
type GetInstancesDocs2Params struct {

	/*Authorization
	  The authorization tokens. The format for the header value is 'User &lt;user secret&gt;, Organization &lt;org secret&gt;'

	*/
	Authorization string
	/*ID
	  The ID of the element instance

	*/
	ID int64
	/*OperationID
	  The id of the operation for which swagger docs is returned

	*/
	OperationID *string
	/*Version
	  The element swagger version to get the corresponding element swagger, Passing in "-1" gives latest element swagger

	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get instances docs2 params
func (o *GetInstancesDocs2Params) WithTimeout(timeout time.Duration) *GetInstancesDocs2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get instances docs2 params
func (o *GetInstancesDocs2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get instances docs2 params
func (o *GetInstancesDocs2Params) WithContext(ctx context.Context) *GetInstancesDocs2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get instances docs2 params
func (o *GetInstancesDocs2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get instances docs2 params
func (o *GetInstancesDocs2Params) WithHTTPClient(client *http.Client) *GetInstancesDocs2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get instances docs2 params
func (o *GetInstancesDocs2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get instances docs2 params
func (o *GetInstancesDocs2Params) WithAuthorization(authorization string) *GetInstancesDocs2Params {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get instances docs2 params
func (o *GetInstancesDocs2Params) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithID adds the id to the get instances docs2 params
func (o *GetInstancesDocs2Params) WithID(id int64) *GetInstancesDocs2Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the get instances docs2 params
func (o *GetInstancesDocs2Params) SetID(id int64) {
	o.ID = id
}

// WithOperationID adds the operationID to the get instances docs2 params
func (o *GetInstancesDocs2Params) WithOperationID(operationID *string) *GetInstancesDocs2Params {
	o.SetOperationID(operationID)
	return o
}

// SetOperationID adds the operationId to the get instances docs2 params
func (o *GetInstancesDocs2Params) SetOperationID(operationID *string) {
	o.OperationID = operationID
}

// WithVersion adds the version to the get instances docs2 params
func (o *GetInstancesDocs2Params) WithVersion(version *string) *GetInstancesDocs2Params {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get instances docs2 params
func (o *GetInstancesDocs2Params) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstancesDocs2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.OperationID != nil {

		// query param operationId
		var qrOperationID string
		if o.OperationID != nil {
			qrOperationID = *o.OperationID
		}
		qOperationID := qrOperationID
		if qOperationID != "" {
			if err := r.SetQueryParam("operationId", qOperationID); err != nil {
				return err
			}
		}

	}

	if o.Version != nil {

		// query param version
		var qrVersion string
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
