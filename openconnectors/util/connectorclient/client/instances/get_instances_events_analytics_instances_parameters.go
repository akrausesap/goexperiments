// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInstancesEventsAnalyticsInstancesParams creates a new GetInstancesEventsAnalyticsInstancesParams object
// with the default values initialized.
func NewGetInstancesEventsAnalyticsInstancesParams() *GetInstancesEventsAnalyticsInstancesParams {
	var ()
	return &GetInstancesEventsAnalyticsInstancesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstancesEventsAnalyticsInstancesParamsWithTimeout creates a new GetInstancesEventsAnalyticsInstancesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInstancesEventsAnalyticsInstancesParamsWithTimeout(timeout time.Duration) *GetInstancesEventsAnalyticsInstancesParams {
	var ()
	return &GetInstancesEventsAnalyticsInstancesParams{

		timeout: timeout,
	}
}

// NewGetInstancesEventsAnalyticsInstancesParamsWithContext creates a new GetInstancesEventsAnalyticsInstancesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInstancesEventsAnalyticsInstancesParamsWithContext(ctx context.Context) *GetInstancesEventsAnalyticsInstancesParams {
	var ()
	return &GetInstancesEventsAnalyticsInstancesParams{

		Context: ctx,
	}
}

// NewGetInstancesEventsAnalyticsInstancesParamsWithHTTPClient creates a new GetInstancesEventsAnalyticsInstancesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInstancesEventsAnalyticsInstancesParamsWithHTTPClient(client *http.Client) *GetInstancesEventsAnalyticsInstancesParams {
	var ()
	return &GetInstancesEventsAnalyticsInstancesParams{
		HTTPClient: client,
	}
}

/*GetInstancesEventsAnalyticsInstancesParams contains all the parameters to send to the API endpoint
for the get instances events analytics instances operation typically these are written to a http.Request
*/
type GetInstancesEventsAnalyticsInstancesParams struct {

	/*Authorization
	  The authorization tokens. The format for the header value is 'User &lt;user secret&gt;, Organization &lt;org secret&gt;'

	*/
	Authorization string
	/*AccountIds
	  The comma-separated list of account IDs to search. Only applicable for organization admins. Defaults to current user's account only.'

	*/
	AccountIds []int64
	/*From
	  Start time in ISO 8601 format, e.g. '2014-04-14T00:00:00-4:00'. An unspecified time zone defaults to UTC. Defaults to one week prior to the current date.

	*/
	From *string
	/*Interval
	  Interval to be sent for the data to be returned, it can be year, quarter, month, week, day, hour, minute, second

	*/
	Interval *string
	/*To
	  End time in ISO 8601 format, e.g. '2014-04-14T00:00:00-4:00'. An unspecified time zone defaults to UTC. Defaults to the current date.

	*/
	To *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) WithTimeout(timeout time.Duration) *GetInstancesEventsAnalyticsInstancesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) WithContext(ctx context.Context) *GetInstancesEventsAnalyticsInstancesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) WithHTTPClient(client *http.Client) *GetInstancesEventsAnalyticsInstancesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) WithAuthorization(authorization string) *GetInstancesEventsAnalyticsInstancesParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithAccountIds adds the accountIds to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) WithAccountIds(accountIds []int64) *GetInstancesEventsAnalyticsInstancesParams {
	o.SetAccountIds(accountIds)
	return o
}

// SetAccountIds adds the accountIds to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) SetAccountIds(accountIds []int64) {
	o.AccountIds = accountIds
}

// WithFrom adds the from to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) WithFrom(from *string) *GetInstancesEventsAnalyticsInstancesParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) SetFrom(from *string) {
	o.From = from
}

// WithInterval adds the interval to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) WithInterval(interval *string) *GetInstancesEventsAnalyticsInstancesParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) SetInterval(interval *string) {
	o.Interval = interval
}

// WithTo adds the to to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) WithTo(to *string) *GetInstancesEventsAnalyticsInstancesParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get instances events analytics instances params
func (o *GetInstancesEventsAnalyticsInstancesParams) SetTo(to *string) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstancesEventsAnalyticsInstancesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	var valuesAccountIds []string
	for _, v := range o.AccountIds {
		valuesAccountIds = append(valuesAccountIds, swag.FormatInt64(v))
	}

	joinedAccountIds := swag.JoinByFormat(valuesAccountIds, "multi")
	// query array param accountIds[]
	if err := r.SetQueryParam("accountIds[]", joinedAccountIds...); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom string
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Interval != nil {

		// query param interval
		var qrInterval string
		if o.Interval != nil {
			qrInterval = *o.Interval
		}
		qInterval := qrInterval
		if qInterval != "" {
			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param to
		var qrTo string
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
