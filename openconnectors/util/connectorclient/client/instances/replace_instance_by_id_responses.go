// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/akrausesap/goexperiments/openconnectors/util/connectorclient/models"
)

// ReplaceInstanceByIDReader is a Reader for the ReplaceInstanceByID structure.
type ReplaceInstanceByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceInstanceByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReplaceInstanceByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReplaceInstanceByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewReplaceInstanceByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReplaceInstanceByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReplaceInstanceByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReplaceInstanceByIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewReplaceInstanceByIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewReplaceInstanceByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewReplaceInstanceByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReplaceInstanceByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReplaceInstanceByIDOK creates a ReplaceInstanceByIDOK with default headers values
func NewReplaceInstanceByIDOK() *ReplaceInstanceByIDOK {
	return &ReplaceInstanceByIDOK{}
}

/*ReplaceInstanceByIDOK handles this case with default header values.

OK - Everything worked as expected
*/
type ReplaceInstanceByIDOK struct {
	Payload *models.ElementInstance
}

func (o *ReplaceInstanceByIDOK) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdOK  %+v", 200, o.Payload)
}

func (o *ReplaceInstanceByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ElementInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceInstanceByIDBadRequest creates a ReplaceInstanceByIDBadRequest with default headers values
func NewReplaceInstanceByIDBadRequest() *ReplaceInstanceByIDBadRequest {
	return &ReplaceInstanceByIDBadRequest{}
}

/*ReplaceInstanceByIDBadRequest handles this case with default header values.

Bad Request - Often due to a missing request parameter
*/
type ReplaceInstanceByIDBadRequest struct {
}

func (o *ReplaceInstanceByIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdBadRequest ", 400)
}

func (o *ReplaceInstanceByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstanceByIDUnauthorized creates a ReplaceInstanceByIDUnauthorized with default headers values
func NewReplaceInstanceByIDUnauthorized() *ReplaceInstanceByIDUnauthorized {
	return &ReplaceInstanceByIDUnauthorized{}
}

/*ReplaceInstanceByIDUnauthorized handles this case with default header values.

Unauthorized - An invalid element token, user secret and/or org secret provided
*/
type ReplaceInstanceByIDUnauthorized struct {
}

func (o *ReplaceInstanceByIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdUnauthorized ", 401)
}

func (o *ReplaceInstanceByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstanceByIDForbidden creates a ReplaceInstanceByIDForbidden with default headers values
func NewReplaceInstanceByIDForbidden() *ReplaceInstanceByIDForbidden {
	return &ReplaceInstanceByIDForbidden{}
}

/*ReplaceInstanceByIDForbidden handles this case with default header values.

Forbidden - Access to the resource by the provider is forbidden
*/
type ReplaceInstanceByIDForbidden struct {
}

func (o *ReplaceInstanceByIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdForbidden ", 403)
}

func (o *ReplaceInstanceByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstanceByIDNotFound creates a ReplaceInstanceByIDNotFound with default headers values
func NewReplaceInstanceByIDNotFound() *ReplaceInstanceByIDNotFound {
	return &ReplaceInstanceByIDNotFound{}
}

/*ReplaceInstanceByIDNotFound handles this case with default header values.

Not found - The requested resource is not found
*/
type ReplaceInstanceByIDNotFound struct {
}

func (o *ReplaceInstanceByIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdNotFound ", 404)
}

func (o *ReplaceInstanceByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstanceByIDMethodNotAllowed creates a ReplaceInstanceByIDMethodNotAllowed with default headers values
func NewReplaceInstanceByIDMethodNotAllowed() *ReplaceInstanceByIDMethodNotAllowed {
	return &ReplaceInstanceByIDMethodNotAllowed{}
}

/*ReplaceInstanceByIDMethodNotAllowed handles this case with default header values.

Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected
*/
type ReplaceInstanceByIDMethodNotAllowed struct {
}

func (o *ReplaceInstanceByIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdMethodNotAllowed ", 405)
}

func (o *ReplaceInstanceByIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstanceByIDNotAcceptable creates a ReplaceInstanceByIDNotAcceptable with default headers values
func NewReplaceInstanceByIDNotAcceptable() *ReplaceInstanceByIDNotAcceptable {
	return &ReplaceInstanceByIDNotAcceptable{}
}

/*ReplaceInstanceByIDNotAcceptable handles this case with default header values.

Not acceptable - The response content type does not match the 'Accept' header value
*/
type ReplaceInstanceByIDNotAcceptable struct {
}

func (o *ReplaceInstanceByIDNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdNotAcceptable ", 406)
}

func (o *ReplaceInstanceByIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstanceByIDConflict creates a ReplaceInstanceByIDConflict with default headers values
func NewReplaceInstanceByIDConflict() *ReplaceInstanceByIDConflict {
	return &ReplaceInstanceByIDConflict{}
}

/*ReplaceInstanceByIDConflict handles this case with default header values.

Conflict - If a resource being created already exists
*/
type ReplaceInstanceByIDConflict struct {
}

func (o *ReplaceInstanceByIDConflict) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdConflict ", 409)
}

func (o *ReplaceInstanceByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstanceByIDUnsupportedMediaType creates a ReplaceInstanceByIDUnsupportedMediaType with default headers values
func NewReplaceInstanceByIDUnsupportedMediaType() *ReplaceInstanceByIDUnsupportedMediaType {
	return &ReplaceInstanceByIDUnsupportedMediaType{}
}

/*ReplaceInstanceByIDUnsupportedMediaType handles this case with default header values.

Unsupported media type - The server cannot handle the requested Content-Type
*/
type ReplaceInstanceByIDUnsupportedMediaType struct {
}

func (o *ReplaceInstanceByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdUnsupportedMediaType ", 415)
}

func (o *ReplaceInstanceByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstanceByIDInternalServerError creates a ReplaceInstanceByIDInternalServerError with default headers values
func NewReplaceInstanceByIDInternalServerError() *ReplaceInstanceByIDInternalServerError {
	return &ReplaceInstanceByIDInternalServerError{}
}

/*ReplaceInstanceByIDInternalServerError handles this case with default header values.

Server error - Something went wrong on the Cloud Elements server
*/
type ReplaceInstanceByIDInternalServerError struct {
}

func (o *ReplaceInstanceByIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /instances/{id}][%d] replaceInstanceByIdInternalServerError ", 500)
}

func (o *ReplaceInstanceByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
