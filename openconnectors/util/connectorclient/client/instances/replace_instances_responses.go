// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/akrausesap/goexperiments/openconnectors/util/connectorclient/models"
)

// ReplaceInstancesReader is a Reader for the ReplaceInstances structure.
type ReplaceInstancesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceInstancesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReplaceInstancesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReplaceInstancesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewReplaceInstancesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewReplaceInstancesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewReplaceInstancesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewReplaceInstancesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewReplaceInstancesNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewReplaceInstancesConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewReplaceInstancesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReplaceInstancesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReplaceInstancesOK creates a ReplaceInstancesOK with default headers values
func NewReplaceInstancesOK() *ReplaceInstancesOK {
	return &ReplaceInstancesOK{}
}

/*ReplaceInstancesOK handles this case with default header values.

OK - Everything worked as expected
*/
type ReplaceInstancesOK struct {
	Payload *models.ElementInstance
}

func (o *ReplaceInstancesOK) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesOK  %+v", 200, o.Payload)
}

func (o *ReplaceInstancesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ElementInstance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceInstancesBadRequest creates a ReplaceInstancesBadRequest with default headers values
func NewReplaceInstancesBadRequest() *ReplaceInstancesBadRequest {
	return &ReplaceInstancesBadRequest{}
}

/*ReplaceInstancesBadRequest handles this case with default header values.

Bad Request - Often due to a missing request parameter
*/
type ReplaceInstancesBadRequest struct {
}

func (o *ReplaceInstancesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesBadRequest ", 400)
}

func (o *ReplaceInstancesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesUnauthorized creates a ReplaceInstancesUnauthorized with default headers values
func NewReplaceInstancesUnauthorized() *ReplaceInstancesUnauthorized {
	return &ReplaceInstancesUnauthorized{}
}

/*ReplaceInstancesUnauthorized handles this case with default header values.

Unauthorized - An invalid element token, user secret and/or org secret provided
*/
type ReplaceInstancesUnauthorized struct {
}

func (o *ReplaceInstancesUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesUnauthorized ", 401)
}

func (o *ReplaceInstancesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesForbidden creates a ReplaceInstancesForbidden with default headers values
func NewReplaceInstancesForbidden() *ReplaceInstancesForbidden {
	return &ReplaceInstancesForbidden{}
}

/*ReplaceInstancesForbidden handles this case with default header values.

Forbidden - Access to the resource by the provider is forbidden
*/
type ReplaceInstancesForbidden struct {
}

func (o *ReplaceInstancesForbidden) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesForbidden ", 403)
}

func (o *ReplaceInstancesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesNotFound creates a ReplaceInstancesNotFound with default headers values
func NewReplaceInstancesNotFound() *ReplaceInstancesNotFound {
	return &ReplaceInstancesNotFound{}
}

/*ReplaceInstancesNotFound handles this case with default header values.

Not found - The requested resource is not found
*/
type ReplaceInstancesNotFound struct {
}

func (o *ReplaceInstancesNotFound) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesNotFound ", 404)
}

func (o *ReplaceInstancesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesMethodNotAllowed creates a ReplaceInstancesMethodNotAllowed with default headers values
func NewReplaceInstancesMethodNotAllowed() *ReplaceInstancesMethodNotAllowed {
	return &ReplaceInstancesMethodNotAllowed{}
}

/*ReplaceInstancesMethodNotAllowed handles this case with default header values.

Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected
*/
type ReplaceInstancesMethodNotAllowed struct {
}

func (o *ReplaceInstancesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesMethodNotAllowed ", 405)
}

func (o *ReplaceInstancesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesNotAcceptable creates a ReplaceInstancesNotAcceptable with default headers values
func NewReplaceInstancesNotAcceptable() *ReplaceInstancesNotAcceptable {
	return &ReplaceInstancesNotAcceptable{}
}

/*ReplaceInstancesNotAcceptable handles this case with default header values.

Not acceptable - The response content type does not match the 'Accept' header value
*/
type ReplaceInstancesNotAcceptable struct {
}

func (o *ReplaceInstancesNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesNotAcceptable ", 406)
}

func (o *ReplaceInstancesNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesConflict creates a ReplaceInstancesConflict with default headers values
func NewReplaceInstancesConflict() *ReplaceInstancesConflict {
	return &ReplaceInstancesConflict{}
}

/*ReplaceInstancesConflict handles this case with default header values.

Conflict - If a resource being created already exists
*/
type ReplaceInstancesConflict struct {
}

func (o *ReplaceInstancesConflict) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesConflict ", 409)
}

func (o *ReplaceInstancesConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesUnsupportedMediaType creates a ReplaceInstancesUnsupportedMediaType with default headers values
func NewReplaceInstancesUnsupportedMediaType() *ReplaceInstancesUnsupportedMediaType {
	return &ReplaceInstancesUnsupportedMediaType{}
}

/*ReplaceInstancesUnsupportedMediaType handles this case with default header values.

Unsupported media type - The server cannot handle the requested Content-Type
*/
type ReplaceInstancesUnsupportedMediaType struct {
}

func (o *ReplaceInstancesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesUnsupportedMediaType ", 415)
}

func (o *ReplaceInstancesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewReplaceInstancesInternalServerError creates a ReplaceInstancesInternalServerError with default headers values
func NewReplaceInstancesInternalServerError() *ReplaceInstancesInternalServerError {
	return &ReplaceInstancesInternalServerError{}
}

/*ReplaceInstancesInternalServerError handles this case with default header values.

Server error - Something went wrong on the Cloud Elements server
*/
type ReplaceInstancesInternalServerError struct {
}

func (o *ReplaceInstancesInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /instances][%d] replaceInstancesInternalServerError ", 500)
}

func (o *ReplaceInstancesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
