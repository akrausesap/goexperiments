// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/akrausesap/goexperiments/openconnectors/util/connectorclient/models"
)

// NewUpdateInstancesConfigurationByConfigIDParams creates a new UpdateInstancesConfigurationByConfigIDParams object
// with the default values initialized.
func NewUpdateInstancesConfigurationByConfigIDParams() *UpdateInstancesConfigurationByConfigIDParams {
	var ()
	return &UpdateInstancesConfigurationByConfigIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateInstancesConfigurationByConfigIDParamsWithTimeout creates a new UpdateInstancesConfigurationByConfigIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateInstancesConfigurationByConfigIDParamsWithTimeout(timeout time.Duration) *UpdateInstancesConfigurationByConfigIDParams {
	var ()
	return &UpdateInstancesConfigurationByConfigIDParams{

		timeout: timeout,
	}
}

// NewUpdateInstancesConfigurationByConfigIDParamsWithContext creates a new UpdateInstancesConfigurationByConfigIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateInstancesConfigurationByConfigIDParamsWithContext(ctx context.Context) *UpdateInstancesConfigurationByConfigIDParams {
	var ()
	return &UpdateInstancesConfigurationByConfigIDParams{

		Context: ctx,
	}
}

// NewUpdateInstancesConfigurationByConfigIDParamsWithHTTPClient creates a new UpdateInstancesConfigurationByConfigIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateInstancesConfigurationByConfigIDParamsWithHTTPClient(client *http.Client) *UpdateInstancesConfigurationByConfigIDParams {
	var ()
	return &UpdateInstancesConfigurationByConfigIDParams{
		HTTPClient: client,
	}
}

/*UpdateInstancesConfigurationByConfigIDParams contains all the parameters to send to the API endpoint
for the update instances configuration by config Id operation typically these are written to a http.Request
*/
type UpdateInstancesConfigurationByConfigIDParams struct {

	/*Authorization
	  The authorization tokens. The format for the header value is 'User &lt;user secret&gt;, Organization &lt;org secret&gt;, Element &lt;token&gt;'

	*/
	Authorization string
	/*Config
	  The updated element instance config

	*/
	Config *models.ElementInstanceConfigUpdate
	/*ConfigID
	  The ID of the element instance config

	*/
	ConfigID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) WithTimeout(timeout time.Duration) *UpdateInstancesConfigurationByConfigIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) WithContext(ctx context.Context) *UpdateInstancesConfigurationByConfigIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) WithHTTPClient(client *http.Client) *UpdateInstancesConfigurationByConfigIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) WithAuthorization(authorization string) *UpdateInstancesConfigurationByConfigIDParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithConfig adds the config to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) WithConfig(config *models.ElementInstanceConfigUpdate) *UpdateInstancesConfigurationByConfigIDParams {
	o.SetConfig(config)
	return o
}

// SetConfig adds the config to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) SetConfig(config *models.ElementInstanceConfigUpdate) {
	o.Config = config
}

// WithConfigID adds the configID to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) WithConfigID(configID int64) *UpdateInstancesConfigurationByConfigIDParams {
	o.SetConfigID(configID)
	return o
}

// SetConfigID adds the configId to the update instances configuration by config Id params
func (o *UpdateInstancesConfigurationByConfigIDParams) SetConfigID(configID int64) {
	o.ConfigID = configID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateInstancesConfigurationByConfigIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Config != nil {
		if err := r.SetBodyParam(o.Config); err != nil {
			return err
		}
	}

	// path param configId
	if err := r.SetPathParam("configId", swag.FormatInt64(o.ConfigID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
