// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/akrausesap/goexperiments/openconnectors/util/connectorclient/models"
)

// GetInstancesEventByEventIDReader is a Reader for the GetInstancesEventByEventID structure.
type GetInstancesEventByEventIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInstancesEventByEventIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetInstancesEventByEventIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetInstancesEventByEventIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetInstancesEventByEventIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetInstancesEventByEventIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetInstancesEventByEventIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetInstancesEventByEventIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 406:
		result := NewGetInstancesEventByEventIDNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewGetInstancesEventByEventIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 415:
		result := NewGetInstancesEventByEventIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetInstancesEventByEventIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetInstancesEventByEventIDOK creates a GetInstancesEventByEventIDOK with default headers values
func NewGetInstancesEventByEventIDOK() *GetInstancesEventByEventIDOK {
	return &GetInstancesEventByEventIDOK{}
}

/*GetInstancesEventByEventIDOK handles this case with default header values.

OK - Everything worked as expected
*/
type GetInstancesEventByEventIDOK struct {
	Payload *models.Event
}

func (o *GetInstancesEventByEventIDOK) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdOK  %+v", 200, o.Payload)
}

func (o *GetInstancesEventByEventIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Event)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInstancesEventByEventIDBadRequest creates a GetInstancesEventByEventIDBadRequest with default headers values
func NewGetInstancesEventByEventIDBadRequest() *GetInstancesEventByEventIDBadRequest {
	return &GetInstancesEventByEventIDBadRequest{}
}

/*GetInstancesEventByEventIDBadRequest handles this case with default header values.

Bad Request - Often due to a missing request parameter
*/
type GetInstancesEventByEventIDBadRequest struct {
}

func (o *GetInstancesEventByEventIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdBadRequest ", 400)
}

func (o *GetInstancesEventByEventIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstancesEventByEventIDUnauthorized creates a GetInstancesEventByEventIDUnauthorized with default headers values
func NewGetInstancesEventByEventIDUnauthorized() *GetInstancesEventByEventIDUnauthorized {
	return &GetInstancesEventByEventIDUnauthorized{}
}

/*GetInstancesEventByEventIDUnauthorized handles this case with default header values.

Unauthorized - An invalid element token, user secret and/or org secret provided
*/
type GetInstancesEventByEventIDUnauthorized struct {
}

func (o *GetInstancesEventByEventIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdUnauthorized ", 401)
}

func (o *GetInstancesEventByEventIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstancesEventByEventIDForbidden creates a GetInstancesEventByEventIDForbidden with default headers values
func NewGetInstancesEventByEventIDForbidden() *GetInstancesEventByEventIDForbidden {
	return &GetInstancesEventByEventIDForbidden{}
}

/*GetInstancesEventByEventIDForbidden handles this case with default header values.

Forbidden - Access to the resource by the provider is forbidden
*/
type GetInstancesEventByEventIDForbidden struct {
}

func (o *GetInstancesEventByEventIDForbidden) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdForbidden ", 403)
}

func (o *GetInstancesEventByEventIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstancesEventByEventIDNotFound creates a GetInstancesEventByEventIDNotFound with default headers values
func NewGetInstancesEventByEventIDNotFound() *GetInstancesEventByEventIDNotFound {
	return &GetInstancesEventByEventIDNotFound{}
}

/*GetInstancesEventByEventIDNotFound handles this case with default header values.

Not found - The requested resource is not found
*/
type GetInstancesEventByEventIDNotFound struct {
}

func (o *GetInstancesEventByEventIDNotFound) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdNotFound ", 404)
}

func (o *GetInstancesEventByEventIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstancesEventByEventIDMethodNotAllowed creates a GetInstancesEventByEventIDMethodNotAllowed with default headers values
func NewGetInstancesEventByEventIDMethodNotAllowed() *GetInstancesEventByEventIDMethodNotAllowed {
	return &GetInstancesEventByEventIDMethodNotAllowed{}
}

/*GetInstancesEventByEventIDMethodNotAllowed handles this case with default header values.

Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected
*/
type GetInstancesEventByEventIDMethodNotAllowed struct {
}

func (o *GetInstancesEventByEventIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdMethodNotAllowed ", 405)
}

func (o *GetInstancesEventByEventIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstancesEventByEventIDNotAcceptable creates a GetInstancesEventByEventIDNotAcceptable with default headers values
func NewGetInstancesEventByEventIDNotAcceptable() *GetInstancesEventByEventIDNotAcceptable {
	return &GetInstancesEventByEventIDNotAcceptable{}
}

/*GetInstancesEventByEventIDNotAcceptable handles this case with default header values.

Not acceptable - The response content type does not match the 'Accept' header value
*/
type GetInstancesEventByEventIDNotAcceptable struct {
}

func (o *GetInstancesEventByEventIDNotAcceptable) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdNotAcceptable ", 406)
}

func (o *GetInstancesEventByEventIDNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstancesEventByEventIDConflict creates a GetInstancesEventByEventIDConflict with default headers values
func NewGetInstancesEventByEventIDConflict() *GetInstancesEventByEventIDConflict {
	return &GetInstancesEventByEventIDConflict{}
}

/*GetInstancesEventByEventIDConflict handles this case with default header values.

Conflict - If a resource being created already exists
*/
type GetInstancesEventByEventIDConflict struct {
}

func (o *GetInstancesEventByEventIDConflict) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdConflict ", 409)
}

func (o *GetInstancesEventByEventIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstancesEventByEventIDUnsupportedMediaType creates a GetInstancesEventByEventIDUnsupportedMediaType with default headers values
func NewGetInstancesEventByEventIDUnsupportedMediaType() *GetInstancesEventByEventIDUnsupportedMediaType {
	return &GetInstancesEventByEventIDUnsupportedMediaType{}
}

/*GetInstancesEventByEventIDUnsupportedMediaType handles this case with default header values.

Unsupported media type - The server cannot handle the requested Content-Type
*/
type GetInstancesEventByEventIDUnsupportedMediaType struct {
}

func (o *GetInstancesEventByEventIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdUnsupportedMediaType ", 415)
}

func (o *GetInstancesEventByEventIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetInstancesEventByEventIDInternalServerError creates a GetInstancesEventByEventIDInternalServerError with default headers values
func NewGetInstancesEventByEventIDInternalServerError() *GetInstancesEventByEventIDInternalServerError {
	return &GetInstancesEventByEventIDInternalServerError{}
}

/*GetInstancesEventByEventIDInternalServerError handles this case with default header values.

Server error - Something went wrong on the Cloud Elements server
*/
type GetInstancesEventByEventIDInternalServerError struct {
}

func (o *GetInstancesEventByEventIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /instances/events/{eventId}][%d] getInstancesEventByEventIdInternalServerError ", 500)
}

func (o *GetInstancesEventByEventIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
