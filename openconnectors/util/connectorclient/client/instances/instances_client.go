// Code generated by go-swagger; DO NOT EDIT.

package instances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new instances API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for instances API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateInstance creates a new element instance in your console instance creation will flow through cloud elements to your console
*/
func (a *Client) CreateInstance(params *CreateInstanceParams) (*CreateInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInstance",
		Method:             "POST",
		PathPattern:        "/instances",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInstanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInstanceOK), nil

}

/*
CreateInstanceObjectObjectNameDefinition creates a new object definition associated with an object name within a specific instance with an associated instance token in authorization header the definitions allow you to define what an object looks like within an instance
*/
func (a *Client) CreateInstanceObjectObjectNameDefinition(params *CreateInstanceObjectObjectNameDefinitionParams) (*CreateInstanceObjectObjectNameDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstanceObjectObjectNameDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInstanceObjectObjectNameDefinition",
		Method:             "POST",
		PathPattern:        "/instances/objects/{objectName}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInstanceObjectObjectNameDefinitionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInstanceObjectObjectNameDefinitionOK), nil

}

/*
CreateInstanceObjectObjectNameDefinition2 creates a new object definition associated with an object name within a specific instance the definitions allow you to define what an object looks like within an instance
*/
func (a *Client) CreateInstanceObjectObjectNameDefinition2(params *CreateInstanceObjectObjectNameDefinition2Params) (*CreateInstanceObjectObjectNameDefinition2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstanceObjectObjectNameDefinition2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInstanceObjectObjectNameDefinition2",
		Method:             "POST",
		PathPattern:        "/instances/{id}/objects/{objectName}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInstanceObjectObjectNameDefinition2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInstanceObjectObjectNameDefinition2OK), nil

}

/*
CreateInstanceTransformationByObjectName creates a transformation for an element instance for a specific object
*/
func (a *Client) CreateInstanceTransformationByObjectName(params *CreateInstanceTransformationByObjectNameParams) (*CreateInstanceTransformationByObjectNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstanceTransformationByObjectNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInstanceTransformationByObjectName",
		Method:             "POST",
		PathPattern:        "/instances/transformations/{objectName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInstanceTransformationByObjectNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInstanceTransformationByObjectNameOK), nil

}

/*
CreateInstanceTransformationByObjectName2 creates a transformation for an element instance for a specific object
*/
func (a *Client) CreateInstanceTransformationByObjectName2(params *CreateInstanceTransformationByObjectName2Params) (*CreateInstanceTransformationByObjectName2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInstanceTransformationByObjectName2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInstanceTransformationByObjectName2",
		Method:             "POST",
		PathPattern:        "/instances/{id}/transformations/{objectName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInstanceTransformationByObjectName2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInstanceTransformationByObjectName2OK), nil

}

/*
DeleteInstanceByID deletes an instance associated with a given ID from your console specifying an instance associated with a given ID that does not exist will result in an error message
*/
func (a *Client) DeleteInstanceByID(params *DeleteInstanceByIDParams) (*DeleteInstanceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstanceById",
		Method:             "DELETE",
		PathPattern:        "/instances/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstanceByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstanceByIDOK), nil

}

/*
DeleteInstances deletes an instance associated with an instance token in authorization header specifying an instance associated with a given token that does not exist will result in an error message
*/
func (a *Client) DeleteInstances(params *DeleteInstancesParams) (*DeleteInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstances",
		Method:             "DELETE",
		PathPattern:        "/instances",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesOK), nil

}

/*
DeleteInstancesEnabled disables an element instance with an associated instance token in authorization header
*/
func (a *Client) DeleteInstancesEnabled(params *DeleteInstancesEnabledParams) (*DeleteInstancesEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesEnabled",
		Method:             "DELETE",
		PathPattern:        "/instances/enabled",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesEnabledOK), nil

}

/*
DeleteInstancesEnabled2 disables an element instance
*/
func (a *Client) DeleteInstancesEnabled2(params *DeleteInstancesEnabled2Params) (*DeleteInstancesEnabled2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesEnabled2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesEnabled2",
		Method:             "DELETE",
		PathPattern:        "/instances/{id}/enabled",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesEnabled2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesEnabled2OK), nil

}

/*
DeleteInstancesObjectsObjectNameDefinitions deletes an object definition associated with an object name for a specific instance with an associated instance token in authorization header specifying an object name that does not have an object definition will result in an error response
*/
func (a *Client) DeleteInstancesObjectsObjectNameDefinitions(params *DeleteInstancesObjectsObjectNameDefinitionsParams) (*DeleteInstancesObjectsObjectNameDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesObjectsObjectNameDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesObjectsObjectNameDefinitions",
		Method:             "DELETE",
		PathPattern:        "/instances/objects/{objectName}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesObjectsObjectNameDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesObjectsObjectNameDefinitionsOK), nil

}

/*
DeleteInstancesObjectsObjectNameDefinitions2 deletes an object definition associated with an object name for a specific instance specifying an object name that does not have an object definition will result in an error response
*/
func (a *Client) DeleteInstancesObjectsObjectNameDefinitions2(params *DeleteInstancesObjectsObjectNameDefinitions2Params) (*DeleteInstancesObjectsObjectNameDefinitions2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesObjectsObjectNameDefinitions2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesObjectsObjectNameDefinitions2",
		Method:             "DELETE",
		PathPattern:        "/instances/{id}/objects/{objectName}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesObjectsObjectNameDefinitions2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesObjectsObjectNameDefinitions2OK), nil

}

/*
DeleteInstancesTraceLogging disables trace level usage logging for an element instance with an associated instance token in authorization header
*/
func (a *Client) DeleteInstancesTraceLogging(params *DeleteInstancesTraceLoggingParams) (*DeleteInstancesTraceLoggingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesTraceLoggingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesTraceLogging",
		Method:             "DELETE",
		PathPattern:        "/instances/trace-logging",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesTraceLoggingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesTraceLoggingOK), nil

}

/*
DeleteInstancesTraceLogging2 disables trace level usage logging for an element instance
*/
func (a *Client) DeleteInstancesTraceLogging2(params *DeleteInstancesTraceLogging2Params) (*DeleteInstancesTraceLogging2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesTraceLogging2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesTraceLogging2",
		Method:             "DELETE",
		PathPattern:        "/instances/{id}/trace-logging",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesTraceLogging2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesTraceLogging2OK), nil

}

/*
DeleteInstancesTransformationByObjectName deletes the transformation for an element instance for a specific object with an associated instance token in authorization header
*/
func (a *Client) DeleteInstancesTransformationByObjectName(params *DeleteInstancesTransformationByObjectNameParams) (*DeleteInstancesTransformationByObjectNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesTransformationByObjectNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesTransformationByObjectName",
		Method:             "DELETE",
		PathPattern:        "/instances/transformations/{objectName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesTransformationByObjectNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesTransformationByObjectNameOK), nil

}

/*
DeleteInstancesTransformationByObjectName2 deletes the transformation for an element instance for a specific object
*/
func (a *Client) DeleteInstancesTransformationByObjectName2(params *DeleteInstancesTransformationByObjectName2Params) (*DeleteInstancesTransformationByObjectName2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesTransformationByObjectName2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesTransformationByObjectName2",
		Method:             "DELETE",
		PathPattern:        "/instances/{id}/transformations/{objectName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesTransformationByObjectName2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesTransformationByObjectName2OK), nil

}

/*
DeleteInstancesTransformations deletes the transformation for an element instance with an associated instance token in authorization header
*/
func (a *Client) DeleteInstancesTransformations(params *DeleteInstancesTransformationsParams) (*DeleteInstancesTransformationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesTransformationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesTransformations",
		Method:             "DELETE",
		PathPattern:        "/instances/transformations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesTransformationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesTransformationsOK), nil

}

/*
DeleteInstancesTransformations2 deletes the transformation for an element instance
*/
func (a *Client) DeleteInstancesTransformations2(params *DeleteInstancesTransformations2Params) (*DeleteInstancesTransformations2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesTransformations2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesTransformations2",
		Method:             "DELETE",
		PathPattern:        "/instances/{id}/transformations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInstancesTransformations2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstancesTransformations2OK), nil

}

/*
GetInstanceByID retrieves an element instance associated with a given ID from a specified path the instance goes through cloud elements to your console specifying an instance with an associated ID that does not exist results in an error response
*/
func (a *Client) GetInstanceByID(params *GetInstanceByIDParams) (*GetInstanceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstanceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstanceById",
		Method:             "GET",
		PathPattern:        "/instances/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstanceByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstanceByIDOK), nil

}

/*
GetInstances retrieves all element instances from a specified path the instances go through cloud elements to your console specifying an instance that does not exist results in an error response
*/
func (a *Client) GetInstances(params *GetInstancesParams) (*GetInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstances",
		Method:             "GET",
		PathPattern:        "/instances",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesOK), nil

}

/*
GetInstancesConfiguration retrieves configuration for an element instance with an associated token in authorization header
*/
func (a *Client) GetInstancesConfiguration(params *GetInstancesConfigurationParams) (*GetInstancesConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesConfigurationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesConfiguration",
		Method:             "GET",
		PathPattern:        "/instances/configuration",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesConfigurationOK), nil

}

/*
GetInstancesConfiguration2 retrieves configuration for an element instance
*/
func (a *Client) GetInstancesConfiguration2(params *GetInstancesConfiguration2Params) (*GetInstancesConfiguration2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesConfiguration2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesConfiguration2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/configuration",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesConfiguration2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesConfiguration2OK), nil

}

/*
GetInstancesConfigurationByConfigID retrieves configuration for an element instance with an associated token in authorization header
*/
func (a *Client) GetInstancesConfigurationByConfigID(params *GetInstancesConfigurationByConfigIDParams) (*GetInstancesConfigurationByConfigIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesConfigurationByConfigIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesConfigurationByConfigId",
		Method:             "GET",
		PathPattern:        "/instances/configuration/{configId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesConfigurationByConfigIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesConfigurationByConfigIDOK), nil

}

/*
GetInstancesConfigurationByConfigId2 retrieves configuration for an element instance
*/
func (a *Client) GetInstancesConfigurationByConfigId2(params *GetInstancesConfigurationByConfigId2Params) (*GetInstancesConfigurationByConfigId2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesConfigurationByConfigId2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesConfigurationByConfigId2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/configuration/{configId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesConfigurationByConfigId2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesConfigurationByConfigId2OK), nil

}

/*
GetInstancesDocByOperationID retrieves an instance specific swagger documentation for an operation with an associated instance token in authorization header
*/
func (a *Client) GetInstancesDocByOperationID(params *GetInstancesDocByOperationIDParams) (*GetInstancesDocByOperationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesDocByOperationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesDocByOperationId",
		Method:             "GET",
		PathPattern:        "/instances/docs/{operationId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesDocByOperationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesDocByOperationIDOK), nil

}

/*
GetInstancesDocByOperationId2 retrieves an instance specific swagger documentation
*/
func (a *Client) GetInstancesDocByOperationId2(params *GetInstancesDocByOperationId2Params) (*GetInstancesDocByOperationId2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesDocByOperationId2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesDocByOperationId2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/docs/{operationId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesDocByOperationId2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesDocByOperationId2OK), nil

}

/*
GetInstancesDocs retrieves an instance specific swagger documentation with an associated instance token in authorization header
*/
func (a *Client) GetInstancesDocs(params *GetInstancesDocsParams) (*GetInstancesDocsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesDocsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesDocs",
		Method:             "GET",
		PathPattern:        "/instances/docs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesDocsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesDocsOK), nil

}

/*
GetInstancesDocs2 retrieves an instance specific swagger documentation
*/
func (a *Client) GetInstancesDocs2(params *GetInstancesDocs2Params) (*GetInstancesDocs2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesDocs2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesDocs2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/docs",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesDocs2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesDocs2OK), nil

}

/*
GetInstancesDocsDefinitions retrieves an definitionation for an operation id with an associated instance token in authorization header
*/
func (a *Client) GetInstancesDocsDefinitions(params *GetInstancesDocsDefinitionsParams) (*GetInstancesDocsDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesDocsDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesDocsDefinitions",
		Method:             "GET",
		PathPattern:        "/instances/docs/{operationId}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesDocsDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesDocsDefinitionsOK), nil

}

/*
GetInstancesDocsDefinitions2 retrieves an instance specific swagger documentation
*/
func (a *Client) GetInstancesDocsDefinitions2(params *GetInstancesDocsDefinitions2Params) (*GetInstancesDocsDefinitions2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesDocsDefinitions2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesDocsDefinitions2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/docs/{operationId}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesDocsDefinitions2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesDocsDefinitions2OK), nil

}

/*
GetInstancesEventByEventID retrieves an event for all element instances or for an associated instance token in authorization header
*/
func (a *Client) GetInstancesEventByEventID(params *GetInstancesEventByEventIDParams) (*GetInstancesEventByEventIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesEventByEventIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesEventByEventId",
		Method:             "GET",
		PathPattern:        "/instances/events/{eventId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesEventByEventIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesEventByEventIDOK), nil

}

/*
GetInstancesEventByEventId2 retrieves an event for an element instance
*/
func (a *Client) GetInstancesEventByEventId2(params *GetInstancesEventByEventId2Params) (*GetInstancesEventByEventId2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesEventByEventId2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesEventByEventId2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/events/{eventId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesEventByEventId2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesEventByEventId2OK), nil

}

/*
GetInstancesEvents retrieves events for all element instances or for an associated instance token in authorization header
*/
func (a *Client) GetInstancesEvents(params *GetInstancesEventsParams) (*GetInstancesEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesEvents",
		Method:             "GET",
		PathPattern:        "/instances/events",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesEventsOK), nil

}

/*
GetInstancesEvents2 retrieves events for an element instance
*/
func (a *Client) GetInstancesEvents2(params *GetInstancesEvents2Params) (*GetInstancesEvents2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesEvents2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesEvents2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/events",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesEvents2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesEvents2OK), nil

}

/*
GetInstancesEventsAnalytics retrieves the number of events within a given date time range for all element instances within the specified account s
*/
func (a *Client) GetInstancesEventsAnalytics(params *GetInstancesEventsAnalyticsParams) (*GetInstancesEventsAnalyticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesEventsAnalyticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesEventsAnalytics",
		Method:             "GET",
		PathPattern:        "/instances/events/analytics",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesEventsAnalyticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesEventsAnalyticsOK), nil

}

/*
GetInstancesEventsAnalyticsAccounts retrieves the number of events within a given date time range aggregated by account ID this API is really only useful for organization admins where more than one account exists
*/
func (a *Client) GetInstancesEventsAnalyticsAccounts(params *GetInstancesEventsAnalyticsAccountsParams) (*GetInstancesEventsAnalyticsAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesEventsAnalyticsAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesEventsAnalyticsAccounts",
		Method:             "GET",
		PathPattern:        "/instances/events/analytics/accounts",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesEventsAnalyticsAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesEventsAnalyticsAccountsOK), nil

}

/*
GetInstancesEventsAnalyticsInstances retrieves the number of events within a given date time range aggregated by element instance ID
*/
func (a *Client) GetInstancesEventsAnalyticsInstances(params *GetInstancesEventsAnalyticsInstancesParams) (*GetInstancesEventsAnalyticsInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesEventsAnalyticsInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesEventsAnalyticsInstances",
		Method:             "GET",
		PathPattern:        "/instances/events/analytics/instances",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesEventsAnalyticsInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesEventsAnalyticsInstancesOK), nil

}

/*
GetInstancesEventsDispositions retrieves events for all element instances or for an associated instance token in authorization header
*/
func (a *Client) GetInstancesEventsDispositions(params *GetInstancesEventsDispositionsParams) (*GetInstancesEventsDispositionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesEventsDispositionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesEventsDispositions",
		Method:             "GET",
		PathPattern:        "/instances/events/dispositions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesEventsDispositionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesEventsDispositionsOK), nil

}

/*
GetInstancesObjectsDefinitions retrieves all of the object definitions within a specific instance with an associated instance token in authorization header if no object definitions exist then this will result in an error response
*/
func (a *Client) GetInstancesObjectsDefinitions(params *GetInstancesObjectsDefinitionsParams) (*GetInstancesObjectsDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesObjectsDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesObjectsDefinitions",
		Method:             "GET",
		PathPattern:        "/instances/objects/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesObjectsDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesObjectsDefinitionsOK), nil

}

/*
GetInstancesObjectsDefinitions2 retrieves all of the object definitions at all levels that could map to a specific instance if no object definitions exist then this will result in an error response
*/
func (a *Client) GetInstancesObjectsDefinitions2(params *GetInstancesObjectsDefinitions2Params) (*GetInstancesObjectsDefinitions2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesObjectsDefinitions2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesObjectsDefinitions2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/objects/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesObjectsDefinitions2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesObjectsDefinitions2OK), nil

}

/*
GetInstancesObjectsObjectNameDefinitions retrieves a specific object definition associated with an object name within a specific instance with an associated instance token in authorization header specifying an object definition associated with a given object name that does not exist will result in an error response
*/
func (a *Client) GetInstancesObjectsObjectNameDefinitions(params *GetInstancesObjectsObjectNameDefinitionsParams) (*GetInstancesObjectsObjectNameDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesObjectsObjectNameDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesObjectsObjectNameDefinitions",
		Method:             "GET",
		PathPattern:        "/instances/objects/{objectName}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesObjectsObjectNameDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesObjectsObjectNameDefinitionsOK), nil

}

/*
GetInstancesObjectsObjectNameDefinitions2 retrieves a specific object definition associated with an object name within a specific instance specifying an object definition associated with a given object name that does not exist will result in an error response
*/
func (a *Client) GetInstancesObjectsObjectNameDefinitions2(params *GetInstancesObjectsObjectNameDefinitions2Params) (*GetInstancesObjectsObjectNameDefinitions2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesObjectsObjectNameDefinitions2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesObjectsObjectNameDefinitions2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/objects/{objectName}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesObjectsObjectNameDefinitions2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesObjectsObjectNameDefinitions2OK), nil

}

/*
GetInstancesTransformationByObjectName retrieves an element instance transformation for a specific object with an associated instance token in authorization header
*/
func (a *Client) GetInstancesTransformationByObjectName(params *GetInstancesTransformationByObjectNameParams) (*GetInstancesTransformationByObjectNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesTransformationByObjectNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesTransformationByObjectName",
		Method:             "GET",
		PathPattern:        "/instances/transformations/{objectName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesTransformationByObjectNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesTransformationByObjectNameOK), nil

}

/*
GetInstancesTransformationByObjectName2 retrieves an element instance transformation for a specific object
*/
func (a *Client) GetInstancesTransformationByObjectName2(params *GetInstancesTransformationByObjectName2Params) (*GetInstancesTransformationByObjectName2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesTransformationByObjectName2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesTransformationByObjectName2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/transformations/{objectName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesTransformationByObjectName2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesTransformationByObjectName2OK), nil

}

/*
GetInstancesTransformations retrieves an element instance transformation with an associated instance token in authorization header
*/
func (a *Client) GetInstancesTransformations(params *GetInstancesTransformationsParams) (*GetInstancesTransformationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesTransformationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesTransformations",
		Method:             "GET",
		PathPattern:        "/instances/transformations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesTransformationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesTransformationsOK), nil

}

/*
GetInstancesTransformations2 retrieves an element instance transformation
*/
func (a *Client) GetInstancesTransformations2(params *GetInstancesTransformations2Params) (*GetInstancesTransformations2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstancesTransformations2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInstancesTransformations2",
		Method:             "GET",
		PathPattern:        "/instances/{id}/transformations",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInstancesTransformations2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInstancesTransformations2OK), nil

}

/*
ReplaceInstanceByID updates an instance associated with a given ID from your console specifying an instance associated with an ID that does not exist will result in an error message
*/
func (a *Client) ReplaceInstanceByID(params *ReplaceInstanceByIDParams) (*ReplaceInstanceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstanceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstanceById",
		Method:             "PUT",
		PathPattern:        "/instances/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstanceByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstanceByIDOK), nil

}

/*
ReplaceInstances updates an instance associated with a given token in authorization header specifying an instance associated with an token that does not exist will result in an error message
*/
func (a *Client) ReplaceInstances(params *ReplaceInstancesParams) (*ReplaceInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstances",
		Method:             "PUT",
		PathPattern:        "/instances",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstancesOK), nil

}

/*
ReplaceInstancesEnabled enables an element instance with an associated instance token in authorization header
*/
func (a *Client) ReplaceInstancesEnabled(params *ReplaceInstancesEnabledParams) (*ReplaceInstancesEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstancesEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstancesEnabled",
		Method:             "PUT",
		PathPattern:        "/instances/enabled",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstancesEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstancesEnabledOK), nil

}

/*
ReplaceInstancesEnabled2 enables an element instance
*/
func (a *Client) ReplaceInstancesEnabled2(params *ReplaceInstancesEnabled2Params) (*ReplaceInstancesEnabled2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstancesEnabled2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstancesEnabled2",
		Method:             "PUT",
		PathPattern:        "/instances/{id}/enabled",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstancesEnabled2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstancesEnabled2OK), nil

}

/*
ReplaceInstancesObjectsObjectNameDefinitions updates a specific object s definition associated with an object name within a specific instance with an associated instance token in authorization header specifying an object definition associated with a given object name that does not exist will result in an error response
*/
func (a *Client) ReplaceInstancesObjectsObjectNameDefinitions(params *ReplaceInstancesObjectsObjectNameDefinitionsParams) (*ReplaceInstancesObjectsObjectNameDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstancesObjectsObjectNameDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstancesObjectsObjectNameDefinitions",
		Method:             "PUT",
		PathPattern:        "/instances/objects/{objectName}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstancesObjectsObjectNameDefinitionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstancesObjectsObjectNameDefinitionsOK), nil

}

/*
ReplaceInstancesObjectsObjectNameDefinitions2 updates a specific object s definition associated with an object name within a specific instance specifying an object definition associated with a given object name that does not exist will result in an error response
*/
func (a *Client) ReplaceInstancesObjectsObjectNameDefinitions2(params *ReplaceInstancesObjectsObjectNameDefinitions2Params) (*ReplaceInstancesObjectsObjectNameDefinitions2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstancesObjectsObjectNameDefinitions2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstancesObjectsObjectNameDefinitions2",
		Method:             "PUT",
		PathPattern:        "/instances/{id}/objects/{objectName}/definitions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstancesObjectsObjectNameDefinitions2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstancesObjectsObjectNameDefinitions2OK), nil

}

/*
ReplaceInstancesTraceLogging temporarilies enable trace level usage logging for an element instance with an associated instance token in authorization header
*/
func (a *Client) ReplaceInstancesTraceLogging(params *ReplaceInstancesTraceLoggingParams) (*ReplaceInstancesTraceLoggingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstancesTraceLoggingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstancesTraceLogging",
		Method:             "PUT",
		PathPattern:        "/instances/trace-logging",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstancesTraceLoggingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstancesTraceLoggingOK), nil

}

/*
ReplaceInstancesTraceLogging2 temporarilies enable trace level usage logging for an element instance
*/
func (a *Client) ReplaceInstancesTraceLogging2(params *ReplaceInstancesTraceLogging2Params) (*ReplaceInstancesTraceLogging2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstancesTraceLogging2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstancesTraceLogging2",
		Method:             "PUT",
		PathPattern:        "/instances/{id}/trace-logging",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstancesTraceLogging2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstancesTraceLogging2OK), nil

}

/*
ReplaceInstancesTransformationByObjectName updates the transformation for an element instance for a specific object with an associated instance token in authorization header
*/
func (a *Client) ReplaceInstancesTransformationByObjectName(params *ReplaceInstancesTransformationByObjectNameParams) (*ReplaceInstancesTransformationByObjectNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstancesTransformationByObjectNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstancesTransformationByObjectName",
		Method:             "PUT",
		PathPattern:        "/instances/transformations/{objectName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstancesTransformationByObjectNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstancesTransformationByObjectNameOK), nil

}

/*
ReplaceInstancesTransformationByObjectName2 updates the transformation for an element instance for a specific object
*/
func (a *Client) ReplaceInstancesTransformationByObjectName2(params *ReplaceInstancesTransformationByObjectName2Params) (*ReplaceInstancesTransformationByObjectName2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceInstancesTransformationByObjectName2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "replaceInstancesTransformationByObjectName2",
		Method:             "PUT",
		PathPattern:        "/instances/{id}/transformations/{objectName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceInstancesTransformationByObjectName2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReplaceInstancesTransformationByObjectName2OK), nil

}

/*
UpdateInstanceByID updates an instance partially associated with a given ID from your console specifying an instance associated with an ID that does not exist will result in an error message
*/
func (a *Client) UpdateInstanceByID(params *UpdateInstanceByIDParams) (*UpdateInstanceByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInstanceByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInstanceById",
		Method:             "PATCH",
		PathPattern:        "/instances/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInstanceByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateInstanceByIDOK), nil

}

/*
UpdateInstances updates an instance partially associated with a given token in authorization header specifying an instance associated with an token that does not exist will result in an error message
*/
func (a *Client) UpdateInstances(params *UpdateInstancesParams) (*UpdateInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInstancesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInstances",
		Method:             "PATCH",
		PathPattern:        "/instances",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInstancesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateInstancesOK), nil

}

/*
UpdateInstancesConfigurationByConfigID updates configuration for an element instance with an associated token in authorization header
*/
func (a *Client) UpdateInstancesConfigurationByConfigID(params *UpdateInstancesConfigurationByConfigIDParams) (*UpdateInstancesConfigurationByConfigIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInstancesConfigurationByConfigIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInstancesConfigurationByConfigId",
		Method:             "PATCH",
		PathPattern:        "/instances/configuration/{configId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInstancesConfigurationByConfigIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateInstancesConfigurationByConfigIDOK), nil

}

/*
UpdateInstancesConfigurationByConfigId2 updates configuration for an element instance
*/
func (a *Client) UpdateInstancesConfigurationByConfigId2(params *UpdateInstancesConfigurationByConfigId2Params) (*UpdateInstancesConfigurationByConfigId2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInstancesConfigurationByConfigId2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInstancesConfigurationByConfigId2",
		Method:             "PATCH",
		PathPattern:        "/instances/{id}/configuration/{configId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInstancesConfigurationByConfigId2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateInstancesConfigurationByConfigId2OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
