// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Event event
// swagger:model Event
type Event struct {

	// event date
	EventDate string `json:"eventDate,omitempty"`

	// event element instances
	EventElementInstances []*EventElementInstance `json:"eventElementInstances"`

	// id
	ID string `json:"id,omitempty"`

	// notified data
	NotifiedData []interface{} `json:"notifiedData"`

	// provider data
	ProviderData string `json:"providerData,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventElementInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateEventElementInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.EventElementInstances) { // not required
		return nil
	}

	for i := 0; i < len(m.EventElementInstances); i++ {
		if swag.IsZero(m.EventElementInstances[i]) { // not required
			continue
		}

		if m.EventElementInstances[i] != nil {
			if err := m.EventElementInstances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventElementInstances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
