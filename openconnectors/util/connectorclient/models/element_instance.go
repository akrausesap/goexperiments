// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElementInstance element instance
// swagger:model ElementInstance
type ElementInstance struct {

	// cache time to live
	CacheTimeToLive int64 `json:"cacheTimeToLive,omitempty"`

	// caching enabled
	// Required: true
	CachingEnabled *bool `json:"cachingEnabled"`

	// channel name
	ChannelName string `json:"channelName,omitempty"`

	// configuration
	Configuration *ConfigurationPropertyMap `json:"configuration,omitempty"`

	// created date
	CreatedDate string `json:"createdDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// element
	Element *Element `json:"element,omitempty"`

	// id
	ID float64 `json:"id,omitempty"`

	// max cache size
	MaxCacheSize float64 `json:"maxCacheSize,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provider data
	ProviderData *ProviderPropertyMap `json:"providerData,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// token
	Token interface{} `json:"token,omitempty"`

	// trace logging enabled
	TraceLoggingEnabled bool `json:"traceLoggingEnabled,omitempty"`

	// updated date
	UpdatedDate float64 `json:"updatedDate,omitempty"`

	// user
	User *User `json:"user,omitempty"`

	// valid
	Valid bool `json:"valid,omitempty"`
}

// Validate validates this element instance
func (m *ElementInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCachingEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviderData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElementInstance) validateCachingEnabled(formats strfmt.Registry) error {

	if err := validate.Required("cachingEnabled", "body", m.CachingEnabled); err != nil {
		return err
	}

	return nil
}

func (m *ElementInstance) validateConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {
		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *ElementInstance) validateElement(formats strfmt.Registry) error {

	if swag.IsZero(m.Element) { // not required
		return nil
	}

	if m.Element != nil {
		if err := m.Element.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("element")
			}
			return err
		}
	}

	return nil
}

func (m *ElementInstance) validateProviderData(formats strfmt.Registry) error {

	if swag.IsZero(m.ProviderData) { // not required
		return nil
	}

	if m.ProviderData != nil {
		if err := m.ProviderData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("providerData")
			}
			return err
		}
	}

	return nil
}

func (m *ElementInstance) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElementInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElementInstance) UnmarshalBinary(b []byte) error {
	var res ElementInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
