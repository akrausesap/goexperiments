// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteServiceByServiceID deletes a service by service ID
*/
func (a *Client) DeleteServiceByServiceID(params *DeleteServiceByServiceIDParams) (*DeleteServiceByServiceIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceByServiceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServiceByServiceId",
		Method:             "DELETE",
		PathPattern:        "/v1/metadata/services/{serviceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServiceByServiceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteServiceByServiceIDNoContent), nil

}

/*
GetServiceByServiceID gets a service by service ID
*/
func (a *Client) GetServiceByServiceID(params *GetServiceByServiceIDParams) (*GetServiceByServiceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceByServiceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceByServiceId",
		Method:             "GET",
		PathPattern:        "/v1/metadata/services/{serviceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceByServiceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceByServiceIDOK), nil

}

/*
GetServices gets all registered services
*/
func (a *Client) GetServices(params *GetServicesParams) (*GetServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServices",
		Method:             "GET",
		PathPattern:        "/v1/metadata/services",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServicesOK), nil

}

/*
RegisterService registers a new service
*/
func (a *Client) RegisterService(params *RegisterServiceParams) (*RegisterServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerService",
		Method:             "POST",
		PathPattern:        "/v1/metadata/services",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RegisterServiceOK), nil

}

/*
UpdateService updates a service by service ID
*/
func (a *Client) UpdateService(params *UpdateServiceParams) (*UpdateServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateService",
		Method:             "PUT",
		PathPattern:        "/v1/metadata/services/{serviceId}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateServiceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
