// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new services API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for services API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
V1MetadataServicesByServiceIDDelete deletes service by service Id

Deletes a service by service ID
*/
func (a *Client) V1MetadataServicesByServiceIDDelete(params *V1MetadataServicesByServiceIDDeleteParams) (*V1MetadataServicesByServiceIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MetadataServicesByServiceIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MetadataServicesByServiceIdDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/metadata/services/{serviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MetadataServicesByServiceIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V1MetadataServicesByServiceIDDeleteNoContent), nil

}

/*
V1MetadataServicesByServiceIDGet gets service by service Id

Gets a service by service ID
*/
func (a *Client) V1MetadataServicesByServiceIDGet(params *V1MetadataServicesByServiceIDGetParams) (*V1MetadataServicesByServiceIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MetadataServicesByServiceIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MetadataServicesByServiceIdGet",
		Method:             "GET",
		PathPattern:        "/v1/metadata/services/{serviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MetadataServicesByServiceIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V1MetadataServicesByServiceIDGetOK), nil

}

/*
V1MetadataServicesByServiceIDPut updates service

Updates a service by service ID
*/
func (a *Client) V1MetadataServicesByServiceIDPut(params *V1MetadataServicesByServiceIDPutParams) (*V1MetadataServicesByServiceIDPutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MetadataServicesByServiceIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MetadataServicesByServiceIdPut",
		Method:             "PUT",
		PathPattern:        "/v1/metadata/services/{serviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MetadataServicesByServiceIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V1MetadataServicesByServiceIDPutOK), nil

}

/*
V1MetadataServicesGet gets services

Gets all registered services
*/
func (a *Client) V1MetadataServicesGet(params *V1MetadataServicesGetParams) (*V1MetadataServicesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MetadataServicesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MetadataServicesGet",
		Method:             "GET",
		PathPattern:        "/v1/metadata/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MetadataServicesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V1MetadataServicesGetOK), nil

}

/*
V1MetadataServicesPost registers service

Registers a new service
*/
func (a *Client) V1MetadataServicesPost(params *V1MetadataServicesPostParams) (*V1MetadataServicesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1MetadataServicesPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "V1MetadataServicesPost",
		Method:             "POST",
		PathPattern:        "/v1/metadata/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1MetadataServicesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*V1MetadataServicesPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
