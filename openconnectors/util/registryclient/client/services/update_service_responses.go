// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/akrausesap/goexperiments/openconnectors/util/registryclient/models"
)

// UpdateServiceReader is a Reader for the UpdateService structure.
type UpdateServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateServiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateServiceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateServiceOK creates a UpdateServiceOK with default headers values
func NewUpdateServiceOK() *UpdateServiceOK {
	return &UpdateServiceOK{}
}

/*UpdateServiceOK handles this case with default header values.

Successful operation
*/
type UpdateServiceOK struct {
}

func (o *UpdateServiceOK) Error() string {
	return fmt.Sprintf("[PUT /v1/metadata/services/{serviceId}][%d] updateServiceOK ", 200)
}

func (o *UpdateServiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateServiceNotFound creates a UpdateServiceNotFound with default headers values
func NewUpdateServiceNotFound() *UpdateServiceNotFound {
	return &UpdateServiceNotFound{}
}

/*UpdateServiceNotFound handles this case with default header values.

Service not found
*/
type UpdateServiceNotFound struct {
	Payload *models.MetadataErrorResponse
}

func (o *UpdateServiceNotFound) Error() string {
	return fmt.Sprintf("[PUT /v1/metadata/services/{serviceId}][%d] updateServiceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetadataErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceInternalServerError creates a UpdateServiceInternalServerError with default headers values
func NewUpdateServiceInternalServerError() *UpdateServiceInternalServerError {
	return &UpdateServiceInternalServerError{}
}

/*UpdateServiceInternalServerError handles this case with default header values.

Internal server error
*/
type UpdateServiceInternalServerError struct {
	Payload *models.MetadataErrorResponse
}

func (o *UpdateServiceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/metadata/services/{serviceId}][%d] updateServiceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateServiceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetadataErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
