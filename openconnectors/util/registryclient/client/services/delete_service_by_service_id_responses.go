// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/akrausesap/goexperiments/openconnectors/util/registryclient/models"
)

// DeleteServiceByServiceIDReader is a Reader for the DeleteServiceByServiceID structure.
type DeleteServiceByServiceIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteServiceByServiceIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteServiceByServiceIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteServiceByServiceIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteServiceByServiceIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteServiceByServiceIDNoContent creates a DeleteServiceByServiceIDNoContent with default headers values
func NewDeleteServiceByServiceIDNoContent() *DeleteServiceByServiceIDNoContent {
	return &DeleteServiceByServiceIDNoContent{}
}

/*DeleteServiceByServiceIDNoContent handles this case with default header values.

Successful operation
*/
type DeleteServiceByServiceIDNoContent struct {
}

func (o *DeleteServiceByServiceIDNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/metadata/services/{serviceId}][%d] deleteServiceByServiceIdNoContent ", 204)
}

func (o *DeleteServiceByServiceIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteServiceByServiceIDNotFound creates a DeleteServiceByServiceIDNotFound with default headers values
func NewDeleteServiceByServiceIDNotFound() *DeleteServiceByServiceIDNotFound {
	return &DeleteServiceByServiceIDNotFound{}
}

/*DeleteServiceByServiceIDNotFound handles this case with default header values.

Service not found
*/
type DeleteServiceByServiceIDNotFound struct {
	Payload *models.MetadataErrorResponse
}

func (o *DeleteServiceByServiceIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /v1/metadata/services/{serviceId}][%d] deleteServiceByServiceIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteServiceByServiceIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetadataErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteServiceByServiceIDInternalServerError creates a DeleteServiceByServiceIDInternalServerError with default headers values
func NewDeleteServiceByServiceIDInternalServerError() *DeleteServiceByServiceIDInternalServerError {
	return &DeleteServiceByServiceIDInternalServerError{}
}

/*DeleteServiceByServiceIDInternalServerError handles this case with default header values.

Internal server error
*/
type DeleteServiceByServiceIDInternalServerError struct {
	Payload *models.MetadataErrorResponse
}

func (o *DeleteServiceByServiceIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /v1/metadata/services/{serviceId}][%d] deleteServiceByServiceIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteServiceByServiceIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetadataErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
